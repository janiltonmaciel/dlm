// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package core

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("../config", "Dockerfile-Build", "\"RlJPTSB7eyAuRnJvbSB9fQoKe3sgcmFuZ2UgLkJlZm9yZUJsb2NrcyAtfX0Ke3sgLiB9fQp7eyBlbmQgLX19Cgp7eyByYW5nZSAuQmxvY2tzIC19fQp7eyAuRGVzY3JpcHRpb24gfX0KCnt7IHJhbmdlIC5CZWZvcmUgLX19Cnt7IC4gfX0Ke3sgZW5kIC19fQoKe3sgLkRhdGEgfX0KCnt7IHJhbmdlIC5BZnRlciAtfX0Ke3sgLiB9fQp7eyBlbmQgLX19Cgp7eyBlbmQgfX0KCnt7IHJhbmdlIC5BZnRlckJsb2NrcyAtfX0Ke3sgLiB9fQp7eyBlbmQgfX0K\"")
	packr.PackJSONBytes("../config", "decidir_imagem.txt", "\"ZGViaWFuOnN0cmV0Y2gKZGViaWFuOmplc3NpZQoKYnVpbGRwYWNrLWRlcHM6c3RyZXRjaCA+IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gtc2NtID4gYnVpbGRwYWNrLWRlcHM6c3RyZXRjaC1jdXJsID4gZGViaWFuOnN0cmV0Y2ggPiBkZWJpYW46c3RyZXRjaC1zbGltCgotLS0tLS0tLS0tLS0tCkE6IGRlYmlhbjpzdHJldGNoCkI6IGRlYmlhbjpzdHJldGNoCgptZXNtYSBpbWFnZW0gLSBPSwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpBOiBkZWJpYW46c3RyZXRjaCwgZGViaWFuOmplc3NpZQpCOiBidWlsZHBhY2stZGVwczpqZXNzaWUKCkE6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQpCOiBidWlsZHBhY2stZGVwczpqZXNzaWUtY3VybAoKbWVzbW8gcmVsZWFzZSA+IHBlZ2FyIG1haW9yIHBlc28gLSBPSwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpBOiBkZWJpYW46c3RyZXRjaApCOiBkZWJpYW46amVzc2llCgpBOiBkZWJpYW46amVzc2llCkI6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKCkE6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQpCOiBidWlsZHBhY2stZGVwczpzdHJldGNoCnBlZ2EgbyBtYWlvciByZWxlYXNlIGNvbSBtYWlvciBwZXNvIChtZW5vciByZWxlYXNlIGNvbSBtYWlvciBwZXNvKSA+IGNvcnJpZ2Ugb3MgcGFjb3RlcyAtIE9LCgo=\"")
	packr.PackJSONBytes("../config", "distributions.yml", "\"CiAgLSBuYW1lOiBVYnVudHUKICAgIHJlbGVhc2VfbmFtZTogMTkuMDQgKGRpc2NvKQogICAgcmVsZWFzZTogMTkuMDQKCiAgLSBuYW1lOiBVYnVudHUKICAgIHJlbGVhc2VfbmFtZTogMTguMTAgKGNvc21pYykKICAgIHJlbGVhc2U6IDE4LjEKCiAgLSBuYW1lOiBVYnVudHUKICAgIHJlbGVhc2VfbmFtZTogMTguMDQgKGJpb25pYykKICAgIHJlbGVhc2U6IDE4LjA0CgogIC0gbmFtZTogVWJ1bnR1CiAgICByZWxlYXNlX25hbWU6IDE2LjA0ICh4ZW5pYWwpCiAgICByZWxlYXNlOiAxNi4wNAoKICAtIG5hbWU6IFVidW50dQogICAgcmVsZWFzZV9uYW1lOiAxNC4wNCAodHJ1c3R5KQogICAgcmVsZWFzZTogMTQuMDQKCiAgLSBuYW1lOiBEZWJpYW4KICAgIHJlbGVhc2VfbmFtZTogMTAgKGJ1c3RlcikKICAgIHJlbGVhc2U6IDEwCgogIC0gbmFtZTogRGViaWFuCiAgICByZWxlYXNlX25hbWU6IDkgKHN0cmV0Y2gpCiAgICByZWxlYXNlOiA5CgogIC0gbmFtZTogRGViaWFuCiAgICByZWxlYXNlX25hbWU6IDggKGplc3NpZSkKICAgIHJlbGVhc2U6IDgKCiAgLSBuYW1lOiBEZWJpYW4KICAgIHJlbGVhc2VfbmFtZTogNyAod2hlZXp5KQogICAgcmVsZWFzZTogNwoKICAtIG5hbWU6IERlYmlhbgogICAgcmVsZWFzZV9uYW1lOiA2IChzcXVlZXplKQogICAgcmVsZWFzZTogNgoKICAtIG5hbWU6IEFscGluZQogICAgcmVsZWFzZV9uYW1lOiAnNC4wJwogICAgcmVsZWFzZTogNC4wCgogIC0gbmFtZTogQWxwaW5lCiAgICByZWxlYXNlX25hbWU6ICczLjknCiAgICByZWxlYXNlOiAzLjkKCiAgLSBuYW1lOiBBbHBpbmUKICAgIHJlbGVhc2VfbmFtZTogJzMuOCcKICAgIHJlbGVhc2U6IDMuOAoKICAtIG5hbWU6IEFscGluZQogICAgcmVsZWFzZV9uYW1lOiAnMy43JwogICAgcmVsZWFzZTogMy43CgogIC0gbmFtZTogQWxwaW5lCiAgICByZWxlYXNlX25hbWU6ICczLjYnCiAgICByZWxlYXNlOiAzLjYKCiAgLSBuYW1lOiBBbHBpbmUKICAgIHJlbGVhc2VfbmFtZTogJzMuNScKICAgIHJlbGVhc2U6IDMuNQoKICAtIG5hbWU6IEFscGluZQogICAgcmVsZWFzZV9uYW1lOiAnMy40JwogICAgcmVsZWFzZTogMy40CgogIC0gbmFtZTogQWxwaW5lCiAgICByZWxlYXNlX25hbWU6ICczLjMnCiAgICByZWxlYXNlOiAzLjMKCiAgLSBuYW1lOiBBbHBpbmUKICAgIHJlbGVhc2VfbmFtZTogJzMuMicKICAgIHJlbGVhc2U6IDMuMgo=\"")
	packr.PackJSONBytes("../config", "erlang-versions.yml", "\"CiAgLSB2ZXJzaW9uOiAyMS4zLjgKICAgIG1ham9yVmVyc2lvbjogJzIxLjMnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTktMDUtMDdUMTk6MTM6NTcnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjEtc2xpbQogICAgICAgICAgLSAyMS4zLXNsaW0KICAgICAgICAgIC0gMjEuMy44LXNsaW0KICAgICAgICAgIC0gc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2RkMjdlMzFlMzdjMjE4N2E2M2YzYmI2YzAxY2JiODM4ODMyZTk4YjYvMjEvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogQWxwaW5lCiAgICAgICAgcmVsZWFzZU5hbWU6ICczLjknCiAgICAgICAgcmVsZWFzZTogMy45CiAgICAgICAgd2VpZ2h0OiAxCiAgICAgICAgaW1hZ2U6IGFscGluZTozLjkKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMS1hbHBpbmUKICAgICAgICAgIC0gMjEuMy1hbHBpbmUKICAgICAgICAgIC0gMjEuMy44LWFscGluZQogICAgICAgICAgLSBhbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9kZDI3ZTMxZTM3YzIxODdhNjNmM2JiNmMwMWNiYjgzODgzMmU5OGI2LzIxL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjEnCiAgICAgICAgICAtICcyMS4zJwogICAgICAgICAgLSAyMS4zLjgKICAgICAgICAgIC0gbGF0ZXN0CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZGQyN2UzMWUzN2MyMTg3YTYzZjNiYjZjMDFjYmI4Mzg4MzJlOThiNi8yMS9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjEuMy43CiAgICBtYWpvclZlcnNpb246ICcyMS4zJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE5LTA0LTI2VDE5OjE2OjI5JwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIxLXNsaW0KICAgICAgICAgIC0gMjEuMy1zbGltCiAgICAgICAgICAtIDIxLjMuNy1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC80OTFhYTM2ZmRmODVmZDA0YTZjN2U0NzIwMTEyNmZjYjk1NmM2ZDYzLzIxL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy45JwogICAgICAgIHJlbGVhc2U6IDMuOQogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My45CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjEtYWxwaW5lCiAgICAgICAgICAtIDIxLjMtYWxwaW5lCiAgICAgICAgICAtIDIxLjMuNy1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvNDkxYWEzNmZkZjg1ZmQwNGE2YzdlNDcyMDExMjZmY2I5NTZjNmQ2My8yMS9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzIxJwogICAgICAgICAgLSAnMjEuMycKICAgICAgICAgIC0gMjEuMy43CiAgICAgICAgICAtIGxhdGVzdAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzQ5MWFhMzZmZGY4NWZkMDRhNmM3ZTQ3MjAxMTI2ZmNiOTU2YzZkNjMvMjEvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDIxLjMuNgogICAgbWFqb3JWZXJzaW9uOiAnMjEuMycKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxOS0wNC0xOFQxNDo1Nzo1OCcKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBBbHBpbmUsIERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMS1zbGltCiAgICAgICAgICAtIDIxLjMtc2xpbQogICAgICAgICAgLSAyMS4zLjYtc2xpbQogICAgICAgICAgLSBzbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZmYwZDI0N2Y1YmJlNzRlOGQ5MDg5ZWEzNWNlNmNkMTFhYWMzY2I2NS8yMS9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuOScKICAgICAgICByZWxlYXNlOiAzLjkKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuOQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIxLWFscGluZQogICAgICAgICAgLSAyMS4zLWFscGluZQogICAgICAgICAgLSAyMS4zLjYtYWxwaW5lCiAgICAgICAgICAtIGFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2ZmMGQyNDdmNWJiZTc0ZThkOTA4OWVhMzVjZTZjZDExYWFjM2NiNjUvMjEvYWxwaW5lL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMScKICAgICAgICAgIC0gJzIxLjMnCiAgICAgICAgICAtIDIxLjMuNgogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9mZjBkMjQ3ZjViYmU3NGU4ZDkwODllYTM1Y2U2Y2QxMWFhYzNjYjY1LzIxL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMS4zLjUKICAgIG1ham9yVmVyc2lvbjogJzIxLjMnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTktMDQtMTVUMjA6NTk6MzAnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjEtc2xpbQogICAgICAgICAgLSAyMS4zLXNsaW0KICAgICAgICAgIC0gMjEuMy41LXNsaW0KICAgICAgICAgIC0gc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2I3MzZiMzhhMzJhZWNiNTY1NjhkMGI3NTEzNDdkYmQwNTY4NTgzZTkvMjEvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogQWxwaW5lCiAgICAgICAgcmVsZWFzZU5hbWU6ICczLjknCiAgICAgICAgcmVsZWFzZTogMy45CiAgICAgICAgd2VpZ2h0OiAxCiAgICAgICAgaW1hZ2U6IGFscGluZTozLjkKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMS1hbHBpbmUKICAgICAgICAgIC0gMjEuMy1hbHBpbmUKICAgICAgICAgIC0gMjEuMy41LWFscGluZQogICAgICAgICAgLSBhbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9iNzM2YjM4YTMyYWVjYjU2NTY4ZDBiNzUxMzQ3ZGJkMDU2ODU4M2U5LzIxL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjEnCiAgICAgICAgICAtICcyMS4zJwogICAgICAgICAgLSAyMS4zLjUKICAgICAgICAgIC0gbGF0ZXN0CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvYjczNmIzOGEzMmFlY2I1NjU2OGQwYjc1MTM0N2RiZDA1Njg1ODNlOS8yMS9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjEuMy40CiAgICBtYWpvclZlcnNpb246ICcyMS4zJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE5LTA0LTEyVDE1OjQ1OjE2JwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIxLXNsaW0KICAgICAgICAgIC0gMjEuMy1zbGltCiAgICAgICAgICAtIDIxLjMuNC1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC80ZTAxMGY1NjVmZDcyZGQ0ZDgxYzdmOGUzMzRhNjY0M2YyZTYzMjdkLzIxL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy45JwogICAgICAgIHJlbGVhc2U6IDMuOQogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My45CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjEtYWxwaW5lCiAgICAgICAgICAtIDIxLjMtYWxwaW5lCiAgICAgICAgICAtIDIxLjMuNC1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvNGUwMTBmNTY1ZmQ3MmRkNGQ4MWM3ZjhlMzM0YTY2NDNmMmU2MzI3ZC8yMS9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzIxJwogICAgICAgICAgLSAnMjEuMycKICAgICAgICAgIC0gMjEuMy40CiAgICAgICAgICAtIGxhdGVzdAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzRlMDEwZjU2NWZkNzJkZDRkODFjN2Y4ZTMzNGE2NjQzZjJlNjMyN2QvMjEvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDIxLjMuMwogICAgbWFqb3JWZXJzaW9uOiAnMjEuMycKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxOS0wNC0wMlQwOTozNToxOCcKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBBbHBpbmUsIERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMS1zbGltCiAgICAgICAgICAtIDIxLjMtc2xpbQogICAgICAgICAgLSAyMS4zLjMtc2xpbQogICAgICAgICAgLSBzbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvYmMzMDhmNjllMTczNDlkMzA4OGI1OTNkMzM0OGUwZGU2MWQ2ZDk5NS8yMS9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuOScKICAgICAgICByZWxlYXNlOiAzLjkKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuOQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIxLWFscGluZQogICAgICAgICAgLSAyMS4zLWFscGluZQogICAgICAgICAgLSAyMS4zLjMtYWxwaW5lCiAgICAgICAgICAtIGFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2JjMzA4ZjY5ZTE3MzQ5ZDMwODhiNTkzZDMzNDhlMGRlNjFkNmQ5OTUvMjEvYWxwaW5lL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMScKICAgICAgICAgIC0gJzIxLjMnCiAgICAgICAgICAtIDIxLjMuMwogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9iYzMwOGY2OWUxNzM0OWQzMDg4YjU5M2QzMzQ4ZTBkZTYxZDZkOTk1LzIxL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMS4zLjIKICAgIG1ham9yVmVyc2lvbjogJzIxLjMnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTktMDMtMjJUMTE6NDM6NTEnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjEtc2xpbQogICAgICAgICAgLSAyMS4zLXNsaW0KICAgICAgICAgIC0gMjEuMy4yLXNsaW0KICAgICAgICAgIC0gc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzgxZGM4NDk0MGM2NzBiMDFjOGI1YzU2MjJiMDI1MDBmNGY3N2E0YjkvMjEvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogQWxwaW5lCiAgICAgICAgcmVsZWFzZU5hbWU6ICczLjknCiAgICAgICAgcmVsZWFzZTogMy45CiAgICAgICAgd2VpZ2h0OiAxCiAgICAgICAgaW1hZ2U6IGFscGluZTozLjkKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMS1hbHBpbmUKICAgICAgICAgIC0gMjEuMy1hbHBpbmUKICAgICAgICAgIC0gMjEuMy4yLWFscGluZQogICAgICAgICAgLSBhbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC84MWRjODQ5NDBjNjcwYjAxYzhiNWM1NjIyYjAyNTAwZjRmNzdhNGI5LzIxL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjEnCiAgICAgICAgICAtICcyMS4zJwogICAgICAgICAgLSAyMS4zLjIKICAgICAgICAgIC0gbGF0ZXN0CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvODFkYzg0OTQwYzY3MGIwMWM4YjVjNTYyMmIwMjUwMGY0Zjc3YTRiOS8yMS9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjEuMy4xCiAgICBtYWpvclZlcnNpb246ICcyMS4zJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE5LTAzLTIwVDA5OjIzOjA1JwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIxLXNsaW0KICAgICAgICAgIC0gMjEuMy1zbGltCiAgICAgICAgICAtIDIxLjMuMS1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC82OWViZWMxMTgzMzlmMzk1OWY4MjlkZmMxMWZkZTBiMmNlNTA2NzBlLzIxL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy45JwogICAgICAgIHJlbGVhc2U6IDMuOQogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My45CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjEtYWxwaW5lCiAgICAgICAgICAtIDIxLjMtYWxwaW5lCiAgICAgICAgICAtIDIxLjMuMS1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvNjllYmVjMTE4MzM5ZjM5NTlmODI5ZGZjMTFmZGUwYjJjZTUwNjcwZS8yMS9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzIxJwogICAgICAgICAgLSAnMjEuMycKICAgICAgICAgIC0gMjEuMy4xCiAgICAgICAgICAtIGxhdGVzdAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzY5ZWJlYzExODMzOWYzOTU5ZjgyOWRmYzExZmRlMGIyY2U1MDY3MGUvMjEvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246ICcyMS4zJwogICAgbWFqb3JWZXJzaW9uOiAnMjEuMycKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxOS0wMy0xM1QwOToxNDozMCcKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBBbHBpbmUsIERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMS1zbGltCiAgICAgICAgICAtIDIxLjMtc2xpbQogICAgICAgICAgLSBzbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvYzQyYTQyYWI1ODA3MzE5YjM3ZjE2OGI3ZDk4OTIyYTIyZTZiZjI0MS8yMS9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuOScKICAgICAgICByZWxlYXNlOiAzLjkKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuOQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIxLWFscGluZQogICAgICAgICAgLSAyMS4zLWFscGluZQogICAgICAgICAgLSBhbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9jNDJhNDJhYjU4MDczMTliMzdmMTY4YjdkOTg5MjJhMjJlNmJmMjQxLzIxL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjEnCiAgICAgICAgICAtICcyMS4zJwogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9jNDJhNDJhYjU4MDczMTliMzdmMTY4YjdkOTg5MjJhMjJlNmJmMjQxLzIxL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMS4yLjcKICAgIG1ham9yVmVyc2lvbjogJzIxLjInCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTktMDMtMDdUMTA6MzU6MDEnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjEtc2xpbQogICAgICAgICAgLSAyMS4yLXNsaW0KICAgICAgICAgIC0gMjEuMi43LXNsaW0KICAgICAgICAgIC0gc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzAzMGE4YzkxNWNhZjEwMTA1NzI0MjRjZjE0ODVkZTQzMzBkYmYwZGMvMjEvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogQWxwaW5lCiAgICAgICAgcmVsZWFzZU5hbWU6ICczLjknCiAgICAgICAgcmVsZWFzZTogMy45CiAgICAgICAgd2VpZ2h0OiAxCiAgICAgICAgaW1hZ2U6IGFscGluZTozLjkKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMS1hbHBpbmUKICAgICAgICAgIC0gMjEuMi1hbHBpbmUKICAgICAgICAgIC0gMjEuMi43LWFscGluZQogICAgICAgICAgLSBhbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC8wMzBhOGM5MTVjYWYxMDEwNTcyNDI0Y2YxNDg1ZGU0MzMwZGJmMGRjLzIxL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjEnCiAgICAgICAgICAtICcyMS4yJwogICAgICAgICAgLSAyMS4yLjcKICAgICAgICAgIC0gbGF0ZXN0CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvMDMwYThjOTE1Y2FmMTAxMDU3MjQyNGNmMTQ4NWRlNDMzMGRiZjBkYy8yMS9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjEuMi42CiAgICBtYWpvclZlcnNpb246ICcyMS4yJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE5LTAyLTE5VDA5OjM5OjE1JwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIxLXNsaW0KICAgICAgICAgIC0gMjEuMi1zbGltCiAgICAgICAgICAtIDIxLjIuNi1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC8yZmE4ZDFkNWU3MzU3ZjA4NjA2OGUyYTUyMTU5YTQ1NjhjZDQ3MmViLzIxL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy45JwogICAgICAgIHJlbGVhc2U6IDMuOQogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My45CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjEtYWxwaW5lCiAgICAgICAgICAtIDIxLjItYWxwaW5lCiAgICAgICAgICAtIDIxLjIuNi1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvMmZhOGQxZDVlNzM1N2YwODYwNjhlMmE1MjE1OWE0NTY4Y2Q0NzJlYi8yMS9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzIxJwogICAgICAgICAgLSAnMjEuMicKICAgICAgICAgIC0gMjEuMi42CiAgICAgICAgICAtIGxhdGVzdAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzJmYThkMWQ1ZTczNTdmMDg2MDY4ZTJhNTIxNTlhNDU2OGNkNDcyZWIvMjEvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDIxLjIuNQogICAgbWFqb3JWZXJzaW9uOiAnMjEuMicKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxOS0wMi0wNVQwMDo0NToxOScKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBBbHBpbmUsIERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMS1zbGltCiAgICAgICAgICAtIDIxLjItc2xpbQogICAgICAgICAgLSAyMS4yLjUtc2xpbQogICAgICAgICAgLSBzbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvMDRjNzE3M2MwNzYyZWI2NDMyY2VkYzY1ZWNmZDM1ZmJiOWE0NDM0MS8yMS9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuOScKICAgICAgICByZWxlYXNlOiAzLjkKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuOQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIxLWFscGluZQogICAgICAgICAgLSAyMS4yLWFscGluZQogICAgICAgICAgLSAyMS4yLjUtYWxwaW5lCiAgICAgICAgICAtIGFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzA0YzcxNzNjMDc2MmViNjQzMmNlZGM2NWVjZmQzNWZiYjlhNDQzNDEvMjEvYWxwaW5lL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMScKICAgICAgICAgIC0gJzIxLjInCiAgICAgICAgICAtIDIxLjIuNQogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC8wNGM3MTczYzA3NjJlYjY0MzJjZWRjNjVlY2ZkMzVmYmI5YTQ0MzQxLzIxL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMS4yLjQKICAgIG1ham9yVmVyc2lvbjogJzIxLjInCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTktMDEtMjVUMjI6NTQ6MTknCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjEtc2xpbQogICAgICAgICAgLSAyMS4yLXNsaW0KICAgICAgICAgIC0gMjEuMi40LXNsaW0KICAgICAgICAgIC0gc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2EzNWU4NDc2NGFmMTM5MWYxNzQ5MDVjN2QxOGRiM2MxYjdjNjI5ZTYvMjEvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogQWxwaW5lCiAgICAgICAgcmVsZWFzZU5hbWU6ICczLjgnCiAgICAgICAgcmVsZWFzZTogMy44CiAgICAgICAgd2VpZ2h0OiAxCiAgICAgICAgaW1hZ2U6IGFscGluZTozLjgKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMS1hbHBpbmUKICAgICAgICAgIC0gMjEuMi1hbHBpbmUKICAgICAgICAgIC0gMjEuMi40LWFscGluZQogICAgICAgICAgLSBhbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9hMzVlODQ3NjRhZjEzOTFmMTc0OTA1YzdkMThkYjNjMWI3YzYyOWU2LzIxL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjEnCiAgICAgICAgICAtICcyMS4yJwogICAgICAgICAgLSAyMS4yLjQKICAgICAgICAgIC0gbGF0ZXN0CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvYTM1ZTg0NzY0YWYxMzkxZjE3NDkwNWM3ZDE4ZGIzYzFiN2M2MjllNi8yMS9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjEuMi4zCiAgICBtYWpvclZlcnNpb246ICcyMS4yJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE5LTAxLTE3VDAxOjM0OjAwJwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIxLXNsaW0KICAgICAgICAgIC0gMjEuMi1zbGltCiAgICAgICAgICAtIDIxLjIuMy1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9hN2Q1OWY0OGRkZGZiNzRmODNlOGVhYTBkN2M1NDc3Yzc2MDgxMTJjLzIxL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy44JwogICAgICAgIHJlbGVhc2U6IDMuOAogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My44CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjEtYWxwaW5lCiAgICAgICAgICAtIDIxLjItYWxwaW5lCiAgICAgICAgICAtIDIxLjIuMy1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvYTdkNTlmNDhkZGRmYjc0ZjgzZThlYWEwZDdjNTQ3N2M3NjA4MTEyYy8yMS9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzIxJwogICAgICAgICAgLSAnMjEuMicKICAgICAgICAgIC0gMjEuMi4zCiAgICAgICAgICAtIGxhdGVzdAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2E3ZDU5ZjQ4ZGRkZmI3NGY4M2U4ZWFhMGQ3YzU0NzdjNzYwODExMmMvMjEvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDIxLjIuMgogICAgbWFqb3JWZXJzaW9uOiAnMjEuMicKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxOC0xMi0yOVQyMzo0MTo1OCcKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBBbHBpbmUsIERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMS1zbGltCiAgICAgICAgICAtIDIxLjItc2xpbQogICAgICAgICAgLSAyMS4yLjItc2xpbQogICAgICAgICAgLSBzbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZTJlODA0YWVlYjZlNmJjNWZkNDlmNjY0ODFiZTFkZmY4Mjk0MjhmNS8yMS9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuOCcKICAgICAgICByZWxlYXNlOiAzLjgKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuOAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIxLWFscGluZQogICAgICAgICAgLSAyMS4yLWFscGluZQogICAgICAgICAgLSAyMS4yLjItYWxwaW5lCiAgICAgICAgICAtIGFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2UyZTgwNGFlZWI2ZTZiYzVmZDQ5ZjY2NDgxYmUxZGZmODI5NDI4ZjUvMjEvYWxwaW5lL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMScKICAgICAgICAgIC0gJzIxLjInCiAgICAgICAgICAtIDIxLjIuMgogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9lMmU4MDRhZWViNmU2YmM1ZmQ0OWY2NjQ4MWJlMWRmZjgyOTQyOGY1LzIxL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMS4yLjEKICAgIG1ham9yVmVyc2lvbjogJzIxLjInCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTgtMTItMjFUMTM6Mjk6MTEnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjEtc2xpbQogICAgICAgICAgLSAyMS4yLXNsaW0KICAgICAgICAgIC0gMjEuMi4xLXNsaW0KICAgICAgICAgIC0gc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzQ2MDkwYWZhOTMwYmU3ZGY2MzdkYjYyZjU4ZGZmYjc1YjE2NDRmYWEvMjEvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogQWxwaW5lCiAgICAgICAgcmVsZWFzZU5hbWU6ICczLjgnCiAgICAgICAgcmVsZWFzZTogMy44CiAgICAgICAgd2VpZ2h0OiAxCiAgICAgICAgaW1hZ2U6IGFscGluZTozLjgKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMS1hbHBpbmUKICAgICAgICAgIC0gMjEuMi1hbHBpbmUKICAgICAgICAgIC0gMjEuMi4xLWFscGluZQogICAgICAgICAgLSBhbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC80NjA5MGFmYTkzMGJlN2RmNjM3ZGI2MmY1OGRmZmI3NWIxNjQ0ZmFhLzIxL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjEnCiAgICAgICAgICAtICcyMS4yJwogICAgICAgICAgLSAyMS4yLjEKICAgICAgICAgIC0gbGF0ZXN0CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvNDYwOTBhZmE5MzBiZTdkZjYzN2RiNjJmNThkZmZiNzViMTY0NGZhYS8yMS9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogJzIxLjInCiAgICBtYWpvclZlcnNpb246ICcyMS4yJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE4LTEyLTEyVDA4OjExOjAzJwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIxLXNsaW0KICAgICAgICAgIC0gMjEuMi1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC81NWZkMjhjMmRlMjlhN2E5NWY2YTg3ZDE4NGNiODU3NWYwODdmNzU4LzIxL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy44JwogICAgICAgIHJlbGVhc2U6IDMuOAogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My44CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjEtYWxwaW5lCiAgICAgICAgICAtIDIxLjItYWxwaW5lCiAgICAgICAgICAtIGFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzU1ZmQyOGMyZGUyOWE3YTk1ZjZhODdkMTg0Y2I4NTc1ZjA4N2Y3NTgvMjEvYWxwaW5lL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMScKICAgICAgICAgIC0gJzIxLjInCiAgICAgICAgICAtIGxhdGVzdAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzU1ZmQyOGMyZGUyOWE3YTk1ZjZhODdkMTg0Y2I4NTc1ZjA4N2Y3NTgvMjEvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDIxLjEuNAogICAgbWFqb3JWZXJzaW9uOiAnMjEuMScKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxOC0xMS0zMFQyMjoyNDoyMicKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBBbHBpbmUsIERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMS1zbGltCiAgICAgICAgICAtIDIxLjEtc2xpbQogICAgICAgICAgLSAyMS4xLjQtc2xpbQogICAgICAgICAgLSBzbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvMTI0YjEwYjM2YTRlODU3MzBkZjQ0ZWExZjQ5ZTQxYWM4YWI2NjBmYS8yMS9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuOCcKICAgICAgICByZWxlYXNlOiAzLjgKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuOAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIxLWFscGluZQogICAgICAgICAgLSAyMS4xLWFscGluZQogICAgICAgICAgLSAyMS4xLjQtYWxwaW5lCiAgICAgICAgICAtIGFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzEyNGIxMGIzNmE0ZTg1NzMwZGY0NGVhMWY0OWU0MWFjOGFiNjYwZmEvMjEvYWxwaW5lL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMScKICAgICAgICAgIC0gJzIxLjEnCiAgICAgICAgICAtIDIxLjEuNAogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC8xMjRiMTBiMzZhNGU4NTczMGRmNDRlYTFmNDllNDFhYzhhYjY2MGZhLzIxL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMS4xLjMKICAgIG1ham9yVmVyc2lvbjogJzIxLjEnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTgtMTEtMjZUMTU6NDg6MjInCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogQWxwaW5lCiAgICAgICAgcmVsZWFzZU5hbWU6ICczLjgnCiAgICAgICAgcmVsZWFzZTogMy44CiAgICAgICAgd2VpZ2h0OiAxCiAgICAgICAgaW1hZ2U6IGFscGluZTozLjgKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMS1hbHBpbmUKICAgICAgICAgIC0gMjEuMS1hbHBpbmUKICAgICAgICAgIC0gMjEuMS4zLWFscGluZQogICAgICAgICAgLSBhbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC84ODE1YTBjMmNlNTI4MmRiZjA4NTUzZjYwMmU1MjE0ZTRlOTYzMWNlLzIxL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjEnCiAgICAgICAgICAtICcyMS4xJwogICAgICAgICAgLSAyMS4xLjMKICAgICAgICAgIC0gbGF0ZXN0CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvODgxNWEwYzJjZTUyODJkYmYwODU1M2Y2MDJlNTIxNGU0ZTk2MzFjZS8yMS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjEtc2xpbQogICAgICAgICAgLSAyMS4xLXNsaW0KICAgICAgICAgIC0gMjEuMS4zLXNsaW0KICAgICAgICAgIC0gc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzBkYWQ2NjEwZTQ4MGNlY2E0YWNkMTNjNGY0YWUwNjFiMjY3NTc0NjUvMjEvc2xpbS9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjEuMS4yCiAgICBtYWpvclZlcnNpb246ICcyMS4xJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE4LTExLTE2VDA5OjU3OjA0JwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIxLXNsaW0KICAgICAgICAgIC0gMjEuMS1zbGltCiAgICAgICAgICAtIDIxLjEuMi1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC83ZTA1OTQ4OGFlOGVhYWZmZDNhOThlZTE4MTY3OTZmNDQ1YTE5NzIxLzIxL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy44JwogICAgICAgIHJlbGVhc2U6IDMuOAogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My44CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjEtYWxwaW5lCiAgICAgICAgICAtIDIxLjEtYWxwaW5lCiAgICAgICAgICAtIDIxLjEuMi1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvN2UwNTk0ODhhZThlYWFmZmQzYTk4ZWUxODE2Nzk2ZjQ0NWExOTcyMS8yMS9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzIxJwogICAgICAgICAgLSAnMjEuMScKICAgICAgICAgIC0gMjEuMS4yCiAgICAgICAgICAtIGxhdGVzdAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzdlMDU5NDg4YWU4ZWFhZmZkM2E5OGVlMTgxNjc5NmY0NDVhMTk3MjEvMjEvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDIxLjEuMQogICAgbWFqb3JWZXJzaW9uOiAnMjEuMScKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxOC0xMC0xNVQxNDozMToxMycKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBBbHBpbmUsIERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMS1zbGltCiAgICAgICAgICAtIDIxLjEtc2xpbQogICAgICAgICAgLSAyMS4xLjEtc2xpbQogICAgICAgICAgLSBzbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZGU0OGU3YzkxYjhhMjkzNzcwYzZmY2NjZGQzMGQyMzI5ZmNjMDQxNC8yMS9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuOCcKICAgICAgICByZWxlYXNlOiAzLjgKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuOAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIxLWFscGluZQogICAgICAgICAgLSAyMS4xLWFscGluZQogICAgICAgICAgLSAyMS4xLjEtYWxwaW5lCiAgICAgICAgICAtIGFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2RlNDhlN2M5MWI4YTI5Mzc3MGM2ZmNjY2RkMzBkMjMyOWZjYzA0MTQvMjEvYWxwaW5lL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMScKICAgICAgICAgIC0gJzIxLjEnCiAgICAgICAgICAtIDIxLjEuMQogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9kZTQ4ZTdjOTFiOGEyOTM3NzBjNmZjY2NkZDMwZDIzMjlmY2MwNDE0LzIxL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAnMjEuMScKICAgIG1ham9yVmVyc2lvbjogJzIxLjEnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTgtMDktMjVUMTg6NDk6MDQnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjEtc2xpbQogICAgICAgICAgLSAyMS4xLXNsaW0KICAgICAgICAgIC0gc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2Y5OTE2NWQ1NTM1NDUwZjRhNzhkYjFlMzYyNjYwMDQ2Y2Y2MDViYmQvMjEvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogQWxwaW5lCiAgICAgICAgcmVsZWFzZU5hbWU6ICczLjgnCiAgICAgICAgcmVsZWFzZTogMy44CiAgICAgICAgd2VpZ2h0OiAxCiAgICAgICAgaW1hZ2U6IGFscGluZTozLjgKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMS1hbHBpbmUKICAgICAgICAgIC0gMjEuMS1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZjk5MTY1ZDU1MzU0NTBmNGE3OGRiMWUzNjI2NjAwNDZjZjYwNWJiZC8yMS9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzIxJwogICAgICAgICAgLSAnMjEuMScKICAgICAgICAgIC0gbGF0ZXN0CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZjk5MTY1ZDU1MzU0NTBmNGE3OGRiMWUzNjI2NjAwNDZjZjYwNWJiZC8yMS9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjEuMC45CiAgICBtYWpvclZlcnNpb246ICcyMS4wJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE4LTA5LTEyVDIyOjUxOjA1JwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIxLXNsaW0KICAgICAgICAgIC0gMjEuMC1zbGltCiAgICAgICAgICAtIDIxLjAuOS1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9jODhkOWNiNmYzOWMyNTM0MjFlNWMxNDVmYjZkYTQ1NDcxMDFjNmM4LzIxL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy44JwogICAgICAgIHJlbGVhc2U6IDMuOAogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My44CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjEtYWxwaW5lCiAgICAgICAgICAtIDIxLjAtYWxwaW5lCiAgICAgICAgICAtIDIxLjAuOS1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvYzg4ZDljYjZmMzljMjUzNDIxZTVjMTQ1ZmI2ZGE0NTQ3MTAxYzZjOC8yMS9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzIxJwogICAgICAgICAgLSAnMjEuMCcKICAgICAgICAgIC0gMjEuMC45CiAgICAgICAgICAtIGxhdGVzdAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2M4OGQ5Y2I2ZjM5YzI1MzQyMWU1YzE0NWZiNmRhNDU0NzEwMWM2YzgvMjEvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDIxLjAuOAogICAgbWFqb3JWZXJzaW9uOiAnMjEuMCcKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxOC0wOS0wN1QxMTo1OTo0NycKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBBbHBpbmUsIERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMS1zbGltCiAgICAgICAgICAtIDIxLjAtc2xpbQogICAgICAgICAgLSAyMS4wLjgtc2xpbQogICAgICAgICAgLSBzbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZjlmM2ZmNDZhNDEyY2UzNGU2MmIwN2JlZjliNWY3NjAyYmY0NTczMy8yMS9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuOCcKICAgICAgICByZWxlYXNlOiAzLjgKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuOAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIxLWFscGluZQogICAgICAgICAgLSAyMS4wLWFscGluZQogICAgICAgICAgLSAyMS4wLjgtYWxwaW5lCiAgICAgICAgICAtIGFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2Y5ZjNmZjQ2YTQxMmNlMzRlNjJiMDdiZWY5YjVmNzYwMmJmNDU3MzMvMjEvYWxwaW5lL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMScKICAgICAgICAgIC0gJzIxLjAnCiAgICAgICAgICAtIDIxLjAuOAogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9mOWYzZmY0NmE0MTJjZTM0ZTYyYjA3YmVmOWI1Zjc2MDJiZjQ1NzMzLzIxL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMS4wLjcKICAgIG1ham9yVmVyc2lvbjogJzIxLjAnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTgtMDgtMzFUMDc6MjI6MDYnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjEtc2xpbQogICAgICAgICAgLSAyMS4wLXNsaW0KICAgICAgICAgIC0gMjEuMC43LXNsaW0KICAgICAgICAgIC0gc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2NjYWFiYmRkZTljOGFhMjI2ZGRjY2E0YjA0NzNmYzg0ODk1MzliZDYvMjEvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogQWxwaW5lCiAgICAgICAgcmVsZWFzZU5hbWU6ICczLjgnCiAgICAgICAgcmVsZWFzZTogMy44CiAgICAgICAgd2VpZ2h0OiAxCiAgICAgICAgaW1hZ2U6IGFscGluZTozLjgKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMS1hbHBpbmUKICAgICAgICAgIC0gMjEuMC1hbHBpbmUKICAgICAgICAgIC0gMjEuMC43LWFscGluZQogICAgICAgICAgLSBhbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9jY2FhYmJkZGU5YzhhYTIyNmRkY2NhNGIwNDczZmM4NDg5NTM5YmQ2LzIxL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjEnCiAgICAgICAgICAtICcyMS4wJwogICAgICAgICAgLSAyMS4wLjcKICAgICAgICAgIC0gbGF0ZXN0CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvY2NhYWJiZGRlOWM4YWEyMjZkZGNjYTRiMDQ3M2ZjODQ4OTUzOWJkNi8yMS9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjEuMC42CiAgICBtYWpvclZlcnNpb246ICcyMS4wJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE4LTA4LTI1VDA3OjAxOjMzJwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIxLXNsaW0KICAgICAgICAgIC0gMjEuMC1zbGltCiAgICAgICAgICAtIDIxLjAuNi1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9jZDdlZDY0NDA1ZmZiY2ZhN2I5YWMzMjc1OGIyMTk4NDVmODdjZmUzLzIxL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy44JwogICAgICAgIHJlbGVhc2U6IDMuOAogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My44CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjEtYWxwaW5lCiAgICAgICAgICAtIDIxLjAtYWxwaW5lCiAgICAgICAgICAtIDIxLjAuNi1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvY2Q3ZWQ2NDQwNWZmYmNmYTdiOWFjMzI3NThiMjE5ODQ1Zjg3Y2ZlMy8yMS9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzIxJwogICAgICAgICAgLSAnMjEuMCcKICAgICAgICAgIC0gMjEuMC42CiAgICAgICAgICAtIGxhdGVzdAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2NkN2VkNjQ0MDVmZmJjZmE3YjlhYzMyNzU4YjIxOTg0NWY4N2NmZTMvMjEvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDIxLjAuNQogICAgbWFqb3JWZXJzaW9uOiAnMjEuMCcKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxOC0wOC0xMlQwNzo1NTowMicKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBBbHBpbmUsIERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMS1zbGltCiAgICAgICAgICAtIDIxLjAtc2xpbQogICAgICAgICAgLSAyMS4wLjUtc2xpbQogICAgICAgICAgLSBzbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZmU1MDVjYjZhYTlhZmM1MDlhZGQzMTgyNWI3ZjE3MzRhMDE2M2MwNC8yMS9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuOCcKICAgICAgICByZWxlYXNlOiAzLjgKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuOAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIxLWFscGluZQogICAgICAgICAgLSAyMS4wLWFscGluZQogICAgICAgICAgLSAyMS4wLjUtYWxwaW5lCiAgICAgICAgICAtIGFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2ZlNTA1Y2I2YWE5YWZjNTA5YWRkMzE4MjViN2YxNzM0YTAxNjNjMDQvMjEvYWxwaW5lL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMScKICAgICAgICAgIC0gJzIxLjAnCiAgICAgICAgICAtIDIxLjAuNQogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9mZTUwNWNiNmFhOWFmYzUwOWFkZDMxODI1YjdmMTczNGEwMTYzYzA0LzIxL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMS4wLjQKICAgIG1ham9yVmVyc2lvbjogJzIxLjAnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTgtMDctMjhUMTQ6MzU6NDknCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjEtc2xpbQogICAgICAgICAgLSAyMS4wLXNsaW0KICAgICAgICAgIC0gMjEuMC40LXNsaW0KICAgICAgICAgIC0gc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzFlMTk1NmRmMTEyYTk4ZDNkYzU0MDFhYmM3ZDQ5ZmViNjIwMWI5OWIvMjEvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogQWxwaW5lCiAgICAgICAgcmVsZWFzZU5hbWU6ICczLjgnCiAgICAgICAgcmVsZWFzZTogMy44CiAgICAgICAgd2VpZ2h0OiAxCiAgICAgICAgaW1hZ2U6IGFscGluZTozLjgKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMS1hbHBpbmUKICAgICAgICAgIC0gMjEuMC1hbHBpbmUKICAgICAgICAgIC0gMjEuMC40LWFscGluZQogICAgICAgICAgLSBhbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC8xZTE5NTZkZjExMmE5OGQzZGM1NDAxYWJjN2Q0OWZlYjYyMDFiOTliLzIxL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjEnCiAgICAgICAgICAtICcyMS4wJwogICAgICAgICAgLSAyMS4wLjQKICAgICAgICAgIC0gbGF0ZXN0CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvMWUxOTU2ZGYxMTJhOThkM2RjNTQwMWFiYzdkNDlmZWI2MjAxYjk5Yi8yMS9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjEuMC4zCiAgICBtYWpvclZlcnNpb246ICcyMS4wJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE4LTA3LTEzVDIxOjU5OjMwJwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIxLXNsaW0KICAgICAgICAgIC0gMjEuMC1zbGltCiAgICAgICAgICAtIDIxLjAuMy1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9mMGZmZmUyYmE2NjZhNWYzMWUxZGU4MWQ4MGRhY2RiZjQwNWM4ZTMyLzIxL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy43JwogICAgICAgIHJlbGVhc2U6IDMuNwogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My43CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjEtYWxwaW5lCiAgICAgICAgICAtIDIxLjAtYWxwaW5lCiAgICAgICAgICAtIDIxLjAuMy1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZjBmZmZlMmJhNjY2YTVmMzFlMWRlODFkODBkYWNkYmY0MDVjOGUzMi8yMS9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzIxJwogICAgICAgICAgLSAnMjEuMCcKICAgICAgICAgIC0gMjEuMC4zCiAgICAgICAgICAtIGxhdGVzdAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2YwZmZmZTJiYTY2NmE1ZjMxZTFkZTgxZDgwZGFjZGJmNDA1YzhlMzIvMjEvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIxLWplc3NpZQogICAgICAgICAgLSAyMS4wLWplc3NpZQogICAgICAgICAgLSAyMS4wLjMtamVzc2llCiAgICAgICAgICAtIGplc3NpZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2NkZWU2ODBjZGE2NDAzZWNiMzlkNWQ2ODU4ZjE4ZjMzOGY2N2M3ZDEvMjEvamVzc2llL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuOCcKICAgICAgICByZWxlYXNlOiAzLjgKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuOAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIxLWFscGluZQogICAgICAgICAgLSAyMS4wLWFscGluZQogICAgICAgICAgLSAyMS4wLjMtYWxwaW5lCiAgICAgICAgICAtIGFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzcwNzQ1ZWFkYTQxYzQ0NGY2NjM0ODQxMTRhYjk0MjE5MmI0NzMzN2IvMjEvYWxwaW5lL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMS4wLjIKICAgIG1ham9yVmVyc2lvbjogJzIxLjAnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTgtMDctMDZUMjE6MDM6NTknCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjEtc2xpbQogICAgICAgICAgLSAyMS4wLXNsaW0KICAgICAgICAgIC0gMjEuMC4yLXNsaW0KICAgICAgICAgIC0gc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzA2MGZmN2E0OGMyNWI3MzUzYmZkMjIzZmYwZDRlNmFmMWM2NjcwODQvMjEvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogQWxwaW5lCiAgICAgICAgcmVsZWFzZU5hbWU6ICczLjcnCiAgICAgICAgcmVsZWFzZTogMy43CiAgICAgICAgd2VpZ2h0OiAxCiAgICAgICAgaW1hZ2U6IGFscGluZTozLjcKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMS1hbHBpbmUKICAgICAgICAgIC0gMjEuMC1hbHBpbmUKICAgICAgICAgIC0gMjEuMC4yLWFscGluZQogICAgICAgICAgLSBhbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC8wNjBmZjdhNDhjMjViNzM1M2JmZDIyM2ZmMGQ0ZTZhZjFjNjY3MDg0LzIxL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjEnCiAgICAgICAgICAtICcyMS4wJwogICAgICAgICAgLSAyMS4wLjIKICAgICAgICAgIC0gbGF0ZXN0CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvMDYwZmY3YTQ4YzI1YjczNTNiZmQyMjNmZjBkNGU2YWYxYzY2NzA4NC8yMS9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjEuMC4xCiAgICBtYWpvclZlcnNpb246ICcyMS4wJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE4LTA2LTI2VDE4OjQ3OjM0JwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIxLXNsaW0KICAgICAgICAgIC0gMjEuMC1zbGltCiAgICAgICAgICAtIDIxLjAuMS1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC8yMDhmM2Q5ODBiOTkyYzMxZDE1MzQzNjUzYzliNzlmMjQ2OTBkZTA5LzIxL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy43JwogICAgICAgIHJlbGVhc2U6IDMuNwogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My43CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjEtYWxwaW5lCiAgICAgICAgICAtIDIxLjAtYWxwaW5lCiAgICAgICAgICAtIDIxLjAuMS1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvMjA4ZjNkOTgwYjk5MmMzMWQxNTM0MzY1M2M5Yjc5ZjI0NjkwZGUwOS8yMS9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzIxJwogICAgICAgICAgLSAnMjEuMCcKICAgICAgICAgIC0gMjEuMC4xCiAgICAgICAgICAtIGxhdGVzdAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzIwOGYzZDk4MGI5OTJjMzFkMTUzNDM2NTNjOWI3OWYyNDY5MGRlMDkvMjEvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246ICcyMS4wJwogICAgbWFqb3JWZXJzaW9uOiAnMjEuMCcKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxOC0wNi0xOVQyMjo1MTozOCcKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBBbHBpbmUsIERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMS1zbGltCiAgICAgICAgICAtIDIxLjAtc2xpbQogICAgICAgICAgLSBzbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvN2I2YTc4NTE2ZTc5YWMyZWJmM2JmYmQ1OTEwNDllYzliZmQ0MGNmNy8yMS9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuNycKICAgICAgICByZWxlYXNlOiAzLjcKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuNwogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIxLWFscGluZQogICAgICAgICAgLSAyMS4wLWFscGluZQogICAgICAgICAgLSBhbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC83YjZhNzg1MTZlNzlhYzJlYmYzYmZiZDU5MTA0OWVjOWJmZDQwY2Y3LzIxL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjEnCiAgICAgICAgICAtICcyMS4wJwogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC83YjZhNzg1MTZlNzlhYzJlYmYzYmZiZDU5MTA0OWVjOWJmZDQwY2Y3LzIxL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMC4zLjguMjEKICAgIG1ham9yVmVyc2lvbjogJzIwLjMnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTktMDQtMTdUMTU6MzU6MzInCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtc2xpbQogICAgICAgICAgLSAyMC4zLXNsaW0KICAgICAgICAgIC0gMjAuMy44LXNsaW0KICAgICAgICAgIC0gMjAuMy44LjIxLXNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC80YzgwZDFlZmE4Y2I5NDk5ZTljOGYxNWVjZmMyYTk0NGRmZGU4YjFmLzIwL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy45JwogICAgICAgIHJlbGVhc2U6IDMuOQogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My45CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjMtYWxwaW5lCiAgICAgICAgICAtIDIwLjMuOC1hbHBpbmUKICAgICAgICAgIC0gMjAuMy44LjIxLWFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzRjODBkMWVmYThjYjk0OTllOWM4ZjE1ZWNmYzJhOTQ0ZGZkZThiMWYvMjAvYWxwaW5lL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMCcKICAgICAgICAgIC0gJzIwLjMnCiAgICAgICAgICAtIDIwLjMuOAogICAgICAgICAgLSAyMC4zLjguMjEKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC80YzgwZDFlZmE4Y2I5NDk5ZTljOGYxNWVjZmMyYTk0NGRmZGU4YjFmLzIwL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMC4zLjguMjAKICAgIG1ham9yVmVyc2lvbjogJzIwLjMnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTktMDMtMjBUMDk6MjM6MDUnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogQWxwaW5lCiAgICAgICAgcmVsZWFzZU5hbWU6ICczLjgnCiAgICAgICAgcmVsZWFzZTogMy44CiAgICAgICAgd2VpZ2h0OiAxCiAgICAgICAgaW1hZ2U6IGFscGluZTozLjgKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMC1hbHBpbmUKICAgICAgICAgIC0gMjAuMy1hbHBpbmUKICAgICAgICAgIC0gMjAuMy44LWFscGluZQogICAgICAgICAgLSAyMC4zLjguMjAtYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZjU4MWYzOWNkMTVhZWVkNTQ4MzYwYzhmMDFiNGJmZTMyNzIzNmRhNS8yMC9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzIwJwogICAgICAgICAgLSAnMjAuMycKICAgICAgICAgIC0gMjAuMy44CiAgICAgICAgICAtIDIwLjMuOC4yMAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2Y1ODFmMzljZDE1YWVlZDU0ODM2MGM4ZjAxYjRiZmUzMjcyMzZkYTUvMjAvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy45JwogICAgICAgIHJlbGVhc2U6IDMuOQogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My45CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjMtYWxwaW5lCiAgICAgICAgICAtIDIwLjMuOC1hbHBpbmUKICAgICAgICAgIC0gMjAuMy44LjIwLWFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzQ2NzQyYThmMmRmMWRiNzk3YzU2YmNmOTg0NmFmMzUxMjI1NTJiYzcvMjAvYWxwaW5lL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMC1zbGltCiAgICAgICAgICAtIDIwLjMtc2xpbQogICAgICAgICAgLSAyMC4zLjgtc2xpbQogICAgICAgICAgLSAyMC4zLjguMjAtc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzc1ZmQyNGQ3M2E0ZGVmZTJhNDhhODNiOGRhYmYzNzlhOTVjNTFhMGMvMjAvc2xpbS9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjAuMy44LjE4CiAgICBtYWpvclZlcnNpb246ICcyMC4zJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE5LTAxLTE4VDAyOjIyOjU1JwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMy1zbGltCiAgICAgICAgICAtIDIwLjMuOC1zbGltCiAgICAgICAgICAtIDIwLjMuOC4xOC1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZmY4MWRkNjc3YjNiZGMzYTBlMmJiZGIxZDdlZmJjYTUyNGU5NTRjZS8yMC9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuOCcKICAgICAgICByZWxlYXNlOiAzLjgKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuOAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLWFscGluZQogICAgICAgICAgLSAyMC4zLWFscGluZQogICAgICAgICAgLSAyMC4zLjgtYWxwaW5lCiAgICAgICAgICAtIDIwLjMuOC4xOC1hbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9mZjgxZGQ2NzdiM2JkYzNhMGUyYmJkYjFkN2VmYmNhNTI0ZTk1NGNlLzIwL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjAnCiAgICAgICAgICAtICcyMC4zJwogICAgICAgICAgLSAyMC4zLjgKICAgICAgICAgIC0gMjAuMy44LjE4CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZmY4MWRkNjc3YjNiZGMzYTBlMmJiZGIxZDdlZmJjYTUyNGU5NTRjZS8yMC9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjAuMy44LjE3CiAgICBtYWpvclZlcnNpb246ICcyMC4zJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE5LTAxLTA5VDEzOjAwOjU0JwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMy1zbGltCiAgICAgICAgICAtIDIwLjMuOC1zbGltCiAgICAgICAgICAtIDIwLjMuOC4xNy1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZDFkNTljMWFmNGU0OTc1ZTRkZjZlYjMxY2M1MGM2NWI5ZjliYTgzYy8yMC9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuOCcKICAgICAgICByZWxlYXNlOiAzLjgKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuOAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLWFscGluZQogICAgICAgICAgLSAyMC4zLWFscGluZQogICAgICAgICAgLSAyMC4zLjgtYWxwaW5lCiAgICAgICAgICAtIDIwLjMuOC4xNy1hbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9kMWQ1OWMxYWY0ZTQ5NzVlNGRmNmViMzFjYzUwYzY1YjlmOWJhODNjLzIwL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjAnCiAgICAgICAgICAtICcyMC4zJwogICAgICAgICAgLSAyMC4zLjgKICAgICAgICAgIC0gMjAuMy44LjE3CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZDFkNTljMWFmNGU0OTc1ZTRkZjZlYjMxY2M1MGM2NWI5ZjliYTgzYy8yMC9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjAuMy44LjE2CiAgICBtYWpvclZlcnNpb246ICcyMC4zJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE5LTAxLTA0VDEwOjU0OjMyJwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMy1zbGltCiAgICAgICAgICAtIDIwLjMuOC1zbGltCiAgICAgICAgICAtIDIwLjMuOC4xNi1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZDJjNTIyMWNjZGVkY2Y5YTcyZDMwZGExMTcyZWY4ZjlkNzBhNThmYi8yMC9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuOCcKICAgICAgICByZWxlYXNlOiAzLjgKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuOAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLWFscGluZQogICAgICAgICAgLSAyMC4zLWFscGluZQogICAgICAgICAgLSAyMC4zLjgtYWxwaW5lCiAgICAgICAgICAtIDIwLjMuOC4xNi1hbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9kMmM1MjIxY2NkZWRjZjlhNzJkMzBkYTExNzJlZjhmOWQ3MGE1OGZiLzIwL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjAnCiAgICAgICAgICAtICcyMC4zJwogICAgICAgICAgLSAyMC4zLjgKICAgICAgICAgIC0gMjAuMy44LjE2CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZDJjNTIyMWNjZGVkY2Y5YTcyZDMwZGExMTcyZWY4ZjlkNzBhNThmYi8yMC9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjAuMy44LjE1CiAgICBtYWpvclZlcnNpb246ICcyMC4zJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE4LTEyLTA4VDAwOjEwOjA2JwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMy1zbGltCiAgICAgICAgICAtIDIwLjMuOC1zbGltCiAgICAgICAgICAtIDIwLjMuOC4xNS1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZTcyYjhhOTc0NzkwNmE4Y2FlODc0Zjk5NWQyZDg4OWY0MTQxZmNhYy8yMC9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuOCcKICAgICAgICByZWxlYXNlOiAzLjgKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuOAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLWFscGluZQogICAgICAgICAgLSAyMC4zLWFscGluZQogICAgICAgICAgLSAyMC4zLjgtYWxwaW5lCiAgICAgICAgICAtIDIwLjMuOC4xNS1hbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9lNzJiOGE5NzQ3OTA2YThjYWU4NzRmOTk1ZDJkODg5ZjQxNDFmY2FjLzIwL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjAnCiAgICAgICAgICAtICcyMC4zJwogICAgICAgICAgLSAyMC4zLjgKICAgICAgICAgIC0gMjAuMy44LjE1CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZTcyYjhhOTc0NzkwNmE4Y2FlODc0Zjk5NWQyZDg4OWY0MTQxZmNhYy8yMC9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjAuMy44LjE0CiAgICBtYWpvclZlcnNpb246ICcyMC4zJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE4LTExLTI2VDE1OjQ4OjIyJwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy44JwogICAgICAgIHJlbGVhc2U6IDMuOAogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My44CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjMtYWxwaW5lCiAgICAgICAgICAtIDIwLjMuOC1hbHBpbmUKICAgICAgICAgIC0gMjAuMy44LjE0LWFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzg4MTVhMGMyY2U1MjgyZGJmMDg1NTNmNjAyZTUyMTRlNGU5NjMxY2UvMjAvYWxwaW5lL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMCcKICAgICAgICAgIC0gJzIwLjMnCiAgICAgICAgICAtIDIwLjMuOAogICAgICAgICAgLSAyMC4zLjguMTQKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC84ODE1YTBjMmNlNTI4MmRiZjA4NTUzZjYwMmU1MjE0ZTRlOTYzMWNlLzIwL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMC1zbGltCiAgICAgICAgICAtIDIwLjMtc2xpbQogICAgICAgICAgLSAyMC4zLjgtc2xpbQogICAgICAgICAgLSAyMC4zLjguMTQtc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzFhYjI4YzdkZTM0OWY1OWNkZjAzYWQzMzAzZDUwZWVlMGEwMzljMWYvMjAvc2xpbS9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjAuMy44LjEzCiAgICBtYWpvclZlcnNpb246ICcyMC4zJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE4LTExLTE1VDEwOjMxOjExJwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMy1zbGltCiAgICAgICAgICAtIDIwLjMuOC1zbGltCiAgICAgICAgICAtIDIwLjMuOC4xMy1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZDI5OWUyNGM5MzRiMDFhNDZhZjExOWNhMmIxMzllYjRkYzY0ODIzNy8yMC9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuOCcKICAgICAgICByZWxlYXNlOiAzLjgKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuOAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLWFscGluZQogICAgICAgICAgLSAyMC4zLWFscGluZQogICAgICAgICAgLSAyMC4zLjgtYWxwaW5lCiAgICAgICAgICAtIDIwLjMuOC4xMy1hbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9kMjk5ZTI0YzkzNGIwMWE0NmFmMTE5Y2EyYjEzOWViNGRjNjQ4MjM3LzIwL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjAnCiAgICAgICAgICAtICcyMC4zJwogICAgICAgICAgLSAyMC4zLjgKICAgICAgICAgIC0gMjAuMy44LjEzCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZDI5OWUyNGM5MzRiMDFhNDZhZjExOWNhMmIxMzllYjRkYzY0ODIzNy8yMC9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjAuMy44LjExCiAgICBtYWpvclZlcnNpb246ICcyMC4zJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE4LTExLTA1VDE5OjUwOjM1JwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMy1zbGltCiAgICAgICAgICAtIDIwLjMuOC1zbGltCiAgICAgICAgICAtIDIwLjMuOC4xMS1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvMDFiYzUyNzBhMzA4ODdlM2I1N2M1YzUwYmNkZWZlMzc1YjJlNTEyMy8yMC9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuOCcKICAgICAgICByZWxlYXNlOiAzLjgKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuOAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLWFscGluZQogICAgICAgICAgLSAyMC4zLWFscGluZQogICAgICAgICAgLSAyMC4zLjgtYWxwaW5lCiAgICAgICAgICAtIDIwLjMuOC4xMS1hbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC8wMWJjNTI3MGEzMDg4N2UzYjU3YzVjNTBiY2RlZmUzNzViMmU1MTIzLzIwL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjAnCiAgICAgICAgICAtICcyMC4zJwogICAgICAgICAgLSAyMC4zLjgKICAgICAgICAgIC0gMjAuMy44LjExCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvMDFiYzUyNzBhMzA4ODdlM2I1N2M1YzUwYmNkZWZlMzc1YjJlNTEyMy8yMC9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjAuMy44LjEwCiAgICBtYWpvclZlcnNpb246ICcyMC4zJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE4LTEwLTE1VDE0OjMxOjEzJwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMy1zbGltCiAgICAgICAgICAtIDIwLjMuOC1zbGltCiAgICAgICAgICAtIDIwLjMuOC4xMC1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZGU2MzE4NzExNTgwMmRlOWJiYzEwYzQzMGMzODFhYzU5ODE2N2FmMS8yMC9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuOCcKICAgICAgICByZWxlYXNlOiAzLjgKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuOAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLWFscGluZQogICAgICAgICAgLSAyMC4zLWFscGluZQogICAgICAgICAgLSAyMC4zLjgtYWxwaW5lCiAgICAgICAgICAtIDIwLjMuOC4xMC1hbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9kZTYzMTg3MTE1ODAyZGU5YmJjMTBjNDMwYzM4MWFjNTk4MTY3YWYxLzIwL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjAnCiAgICAgICAgICAtICcyMC4zJwogICAgICAgICAgLSAyMC4zLjgKICAgICAgICAgIC0gMjAuMy44LjEwCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZGU2MzE4NzExNTgwMmRlOWJiYzEwYzQzMGMzODFhYzU5ODE2N2FmMS8yMC9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjAuMy44LjkKICAgIG1ham9yVmVyc2lvbjogJzIwLjMnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTgtMDktMTlUMjE6MTc6MTcnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtc2xpbQogICAgICAgICAgLSAyMC4zLXNsaW0KICAgICAgICAgIC0gMjAuMy44LXNsaW0KICAgICAgICAgIC0gMjAuMy44Ljktc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2Y2ODg1NWUzYzZkYzg3MmRiYjk3MDNiZjRiNGYwOTA5ZmQ1YTRlZjgvMjAvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogQWxwaW5lCiAgICAgICAgcmVsZWFzZU5hbWU6ICczLjgnCiAgICAgICAgcmVsZWFzZTogMy44CiAgICAgICAgd2VpZ2h0OiAxCiAgICAgICAgaW1hZ2U6IGFscGluZTozLjgKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMC1hbHBpbmUKICAgICAgICAgIC0gMjAuMy1hbHBpbmUKICAgICAgICAgIC0gMjAuMy44LWFscGluZQogICAgICAgICAgLSAyMC4zLjguOS1hbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9mNjg4NTVlM2M2ZGM4NzJkYmI5NzAzYmY0YjRmMDkwOWZkNWE0ZWY4LzIwL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjAnCiAgICAgICAgICAtICcyMC4zJwogICAgICAgICAgLSAyMC4zLjgKICAgICAgICAgIC0gMjAuMy44LjkKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9mNjg4NTVlM2M2ZGM4NzJkYmI5NzAzYmY0YjRmMDkwOWZkNWE0ZWY4LzIwL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMC4zLjguOAogICAgbWFqb3JWZXJzaW9uOiAnMjAuMycKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxOC0wOC0yOVQwMDowMTo0OCcKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBBbHBpbmUsIERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMC1zbGltCiAgICAgICAgICAtIDIwLjMtc2xpbQogICAgICAgICAgLSAyMC4zLjgtc2xpbQogICAgICAgICAgLSAyMC4zLjguOC1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvMTI5MDdiNTFlNzZmOTYxNjc0N2MxYWI3ZGViYTZjZTdlM2Q3ODU2ZS8yMC9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuOCcKICAgICAgICByZWxlYXNlOiAzLjgKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuOAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLWFscGluZQogICAgICAgICAgLSAyMC4zLWFscGluZQogICAgICAgICAgLSAyMC4zLjgtYWxwaW5lCiAgICAgICAgICAtIDIwLjMuOC44LWFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzEyOTA3YjUxZTc2Zjk2MTY3NDdjMWFiN2RlYmE2Y2U3ZTNkNzg1NmUvMjAvYWxwaW5lL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMCcKICAgICAgICAgIC0gJzIwLjMnCiAgICAgICAgICAtIDIwLjMuOAogICAgICAgICAgLSAyMC4zLjguOAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzEyOTA3YjUxZTc2Zjk2MTY3NDdjMWFiN2RlYmE2Y2U3ZTNkNzg1NmUvMjAvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDIwLjMuOC43CiAgICBtYWpvclZlcnNpb246ICcyMC4zJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE4LTA4LTIzVDIwOjA3OjEzJwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMy1zbGltCiAgICAgICAgICAtIDIwLjMuOC1zbGltCiAgICAgICAgICAtIDIwLjMuOC43LXNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC8wMWY0YjBkNmUyNTQzMGQ3YTAwOTRkMzgyZDMyOGRiYTExZmQ2MjQzLzIwL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy44JwogICAgICAgIHJlbGVhc2U6IDMuOAogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My44CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjMtYWxwaW5lCiAgICAgICAgICAtIDIwLjMuOC1hbHBpbmUKICAgICAgICAgIC0gMjAuMy44LjctYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvMDFmNGIwZDZlMjU0MzBkN2EwMDk0ZDM4MmQzMjhkYmExMWZkNjI0My8yMC9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzIwJwogICAgICAgICAgLSAnMjAuMycKICAgICAgICAgIC0gMjAuMy44CiAgICAgICAgICAtIDIwLjMuOC43CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvMDFmNGIwZDZlMjU0MzBkN2EwMDk0ZDM4MmQzMjhkYmExMWZkNjI0My8yMC9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjAuMy44LjYKICAgIG1ham9yVmVyc2lvbjogJzIwLjMnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTgtMDgtMTZUMDc6MTQ6MTknCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtc2xpbQogICAgICAgICAgLSAyMC4zLXNsaW0KICAgICAgICAgIC0gMjAuMy44LXNsaW0KICAgICAgICAgIC0gMjAuMy44LjYtc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2UxYzc0MjYwMzk2MTJlYjg2ZDUzNDgxNmJhZmYxZWJjMWZiOGI1YjAvMjAvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogQWxwaW5lCiAgICAgICAgcmVsZWFzZU5hbWU6ICczLjgnCiAgICAgICAgcmVsZWFzZTogMy44CiAgICAgICAgd2VpZ2h0OiAxCiAgICAgICAgaW1hZ2U6IGFscGluZTozLjgKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMC1hbHBpbmUKICAgICAgICAgIC0gMjAuMy1hbHBpbmUKICAgICAgICAgIC0gMjAuMy44LWFscGluZQogICAgICAgICAgLSAyMC4zLjguNi1hbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9lMWM3NDI2MDM5NjEyZWI4NmQ1MzQ4MTZiYWZmMWViYzFmYjhiNWIwLzIwL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjAnCiAgICAgICAgICAtICcyMC4zJwogICAgICAgICAgLSAyMC4zLjgKICAgICAgICAgIC0gMjAuMy44LjYKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9lMWM3NDI2MDM5NjEyZWI4NmQ1MzQ4MTZiYWZmMWViYzFmYjhiNWIwLzIwL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMC4zLjguNQogICAgbWFqb3JWZXJzaW9uOiAnMjAuMycKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxOC0wOC0xMFQyMTo1NjowNCcKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBBbHBpbmUsIERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMC1zbGltCiAgICAgICAgICAtIDIwLjMtc2xpbQogICAgICAgICAgLSAyMC4zLjgtc2xpbQogICAgICAgICAgLSAyMC4zLjguNS1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvOTQ1OTk5MzEzMWIyM2FkMmQ3MjkyZmY4NjRkYjA0YWFiNzRjN2NmYi8yMC9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuOCcKICAgICAgICByZWxlYXNlOiAzLjgKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuOAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLWFscGluZQogICAgICAgICAgLSAyMC4zLWFscGluZQogICAgICAgICAgLSAyMC4zLjgtYWxwaW5lCiAgICAgICAgICAtIDIwLjMuOC41LWFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzk0NTk5OTMxMzFiMjNhZDJkNzI5MmZmODY0ZGIwNGFhYjc0YzdjZmIvMjAvYWxwaW5lL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMCcKICAgICAgICAgIC0gJzIwLjMnCiAgICAgICAgICAtIDIwLjMuOAogICAgICAgICAgLSAyMC4zLjguNQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzk0NTk5OTMxMzFiMjNhZDJkNzI5MmZmODY0ZGIwNGFhYjc0YzdjZmIvMjAvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDIwLjMuOC40CiAgICBtYWpvclZlcnNpb246ICcyMC4zJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE4LTA4LTAzVDE5OjE3OjUwJwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMy1zbGltCiAgICAgICAgICAtIDIwLjMuOC1zbGltCiAgICAgICAgICAtIDIwLjMuOC40LXNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC8xYjViZGVmYjhhNmQ3MmZhNTMwMWEzNDNkMGFjNmVhMzQ3MTkxNmI4LzIwL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy44JwogICAgICAgIHJlbGVhc2U6IDMuOAogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My44CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjMtYWxwaW5lCiAgICAgICAgICAtIDIwLjMuOC1hbHBpbmUKICAgICAgICAgIC0gMjAuMy44LjQtYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvMWI1YmRlZmI4YTZkNzJmYTUzMDFhMzQzZDBhYzZlYTM0NzE5MTZiOC8yMC9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzIwJwogICAgICAgICAgLSAnMjAuMycKICAgICAgICAgIC0gMjAuMy44CiAgICAgICAgICAtIDIwLjMuOC40CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvMWI1YmRlZmI4YTZkNzJmYTUzMDFhMzQzZDBhYzZlYTM0NzE5MTZiOC8yMC9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjAuMy44LjMKICAgIG1ham9yVmVyc2lvbjogJzIwLjMnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTgtMDctMjRUMTc6MDc6NTUnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtc2xpbQogICAgICAgICAgLSAyMC4zLXNsaW0KICAgICAgICAgIC0gMjAuMy44LXNsaW0KICAgICAgICAgIC0gMjAuMy44LjMtc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzZmNWNlNmUyNGM5NTRlMjUyOGIxYzc4MGQ2Y2NlOTc3NTkyOWE2NDAvMjAvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogQWxwaW5lCiAgICAgICAgcmVsZWFzZU5hbWU6ICczLjgnCiAgICAgICAgcmVsZWFzZTogMy44CiAgICAgICAgd2VpZ2h0OiAxCiAgICAgICAgaW1hZ2U6IGFscGluZTozLjgKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMC1hbHBpbmUKICAgICAgICAgIC0gMjAuMy1hbHBpbmUKICAgICAgICAgIC0gMjAuMy44LWFscGluZQogICAgICAgICAgLSAyMC4zLjguMy1hbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC82ZjVjZTZlMjRjOTU0ZTI1MjhiMWM3ODBkNmNjZTk3NzU5MjlhNjQwLzIwL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjAnCiAgICAgICAgICAtICcyMC4zJwogICAgICAgICAgLSAyMC4zLjgKICAgICAgICAgIC0gMjAuMy44LjMKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC82ZjVjZTZlMjRjOTU0ZTI1MjhiMWM3ODBkNmNjZTk3NzU5MjlhNjQwLzIwL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMC4zLjguMgogICAgbWFqb3JWZXJzaW9uOiAnMjAuMycKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxOC0wNy0yMlQxMjo0NzowNicKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBBbHBpbmUsIERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuOCcKICAgICAgICByZWxlYXNlOiAzLjgKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuOAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLWFscGluZQogICAgICAgICAgLSAyMC4zLWFscGluZQogICAgICAgICAgLSAyMC4zLjgtYWxwaW5lCiAgICAgICAgICAtIDIwLjMuOC4yLWFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzcwNzQ1ZWFkYTQxYzQ0NGY2NjM0ODQxMTRhYjk0MjE5MmI0NzMzN2IvMjAvYWxwaW5lL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMC1zbGltCiAgICAgICAgICAtIDIwLjMtc2xpbQogICAgICAgICAgLSAyMC4zLjgtc2xpbQogICAgICAgICAgLSAyMC4zLjguMi1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvMmI5YjAzZGM0MWNiY2M4ZmM5NGVmODc2N2I4OTk0ODM4ODE0MzIyNi8yMC9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuNycKICAgICAgICByZWxlYXNlOiAzLjcKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuNwogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLWFscGluZQogICAgICAgICAgLSAyMC4zLWFscGluZQogICAgICAgICAgLSAyMC4zLjgtYWxwaW5lCiAgICAgICAgICAtIDIwLjMuOC4yLWFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzJiOWIwM2RjNDFjYmNjOGZjOTRlZjg3NjdiODk5NDgzODgxNDMyMjYvMjAvYWxwaW5lL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMCcKICAgICAgICAgIC0gJzIwLjMnCiAgICAgICAgICAtIDIwLjMuOAogICAgICAgICAgLSAyMC4zLjguMgogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzJiOWIwM2RjNDFjYmNjOGZjOTRlZjg3NjdiODk5NDgzODgxNDMyMjYvMjAvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDIwLjMuOC4xCiAgICBtYWpvclZlcnNpb246ICcyMC4zJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE4LTA2LTI2VDE4OjQ3OjM0JwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMy1zbGltCiAgICAgICAgICAtIDIwLjMuOC1zbGltCiAgICAgICAgICAtIDIwLjMuOC4xLXNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC8yMDhmM2Q5ODBiOTkyYzMxZDE1MzQzNjUzYzliNzlmMjQ2OTBkZTA5LzIwL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy43JwogICAgICAgIHJlbGVhc2U6IDMuNwogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My43CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjMtYWxwaW5lCiAgICAgICAgICAtIDIwLjMuOC1hbHBpbmUKICAgICAgICAgIC0gMjAuMy44LjEtYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvMjA4ZjNkOTgwYjk5MmMzMWQxNTM0MzY1M2M5Yjc5ZjI0NjkwZGUwOS8yMC9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzIwJwogICAgICAgICAgLSAnMjAuMycKICAgICAgICAgIC0gMjAuMy44CiAgICAgICAgICAtIDIwLjMuOC4xCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvMjA4ZjNkOTgwYjk5MmMzMWQxNTM0MzY1M2M5Yjc5ZjI0NjkwZGUwOS8yMC9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjAuMy44CiAgICBtYWpvclZlcnNpb246ICcyMC4zJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE4LTA2LTE0VDIxOjAxOjI5JwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMy1zbGltCiAgICAgICAgICAtIDIwLjMuOC1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9mMWMxMzU4MDRkMjQ2NjBkODUwYmQxODc0ZTQ0Zjc5YTY1ZGViNmE5LzIwL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy43JwogICAgICAgIHJlbGVhc2U6IDMuNwogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My43CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjMtYWxwaW5lCiAgICAgICAgICAtIDIwLjMuOC1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZjFjMTM1ODA0ZDI0NjYwZDg1MGJkMTg3NGU0NGY3OWE2NWRlYjZhOS8yMC9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzIwJwogICAgICAgICAgLSAnMjAuMycKICAgICAgICAgIC0gMjAuMy44CiAgICAgICAgICAtIGxhdGVzdAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2YxYzEzNTgwNGQyNDY2MGQ4NTBiZDE4NzRlNDRmNzlhNjVkZWI2YTkvMjAvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDIwLjMuNwogICAgbWFqb3JWZXJzaW9uOiAnMjAuMycKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxOC0wNi0wNVQyMjoxMjo0NycKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBBbHBpbmUsIERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMC1zbGltCiAgICAgICAgICAtIDIwLjMtc2xpbQogICAgICAgICAgLSAyMC4zLjctc2xpbQogICAgICAgICAgLSBzbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvMzg3MTE4OTcwNGEzZDNjMDFiOTY0YTU1OTQyODBlMGVlMTJjYzQ1MC8yMC9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuNycKICAgICAgICByZWxlYXNlOiAzLjcKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuNwogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLWFscGluZQogICAgICAgICAgLSAyMC4zLWFscGluZQogICAgICAgICAgLSAyMC4zLjctYWxwaW5lCiAgICAgICAgICAtIGFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzM4NzExODk3MDRhM2QzYzAxYjk2NGE1NTk0MjgwZTBlZTEyY2M0NTAvMjAvYWxwaW5lL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMCcKICAgICAgICAgIC0gJzIwLjMnCiAgICAgICAgICAtIDIwLjMuNwogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC8zODcxMTg5NzA0YTNkM2MwMWI5NjRhNTU5NDI4MGUwZWUxMmNjNDUwLzIwL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMC4zLjYKICAgIG1ham9yVmVyc2lvbjogJzIwLjMnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTgtMDUtMDlUMDk6MDk6NDUnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtc2xpbQogICAgICAgICAgLSAyMC4zLXNsaW0KICAgICAgICAgIC0gMjAuMy42LXNsaW0KICAgICAgICAgIC0gc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwLzk5YWIxZTE1MGMzNzA4Y2U4MWJjMDgwNzNjZjU3OTNlZjY3YzZhMWMvMjAvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogQWxwaW5lCiAgICAgICAgcmVsZWFzZU5hbWU6ICczLjcnCiAgICAgICAgcmVsZWFzZTogMy43CiAgICAgICAgd2VpZ2h0OiAxCiAgICAgICAgaW1hZ2U6IGFscGluZTozLjcKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMC1hbHBpbmUKICAgICAgICAgIC0gMjAuMy1hbHBpbmUKICAgICAgICAgIC0gMjAuMy42LWFscGluZQogICAgICAgICAgLSBhbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC85OWFiMWUxNTBjMzcwOGNlODFiYzA4MDczY2Y1NzkzZWY2N2M2YTFjLzIwL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjAnCiAgICAgICAgICAtICcyMC4zJwogICAgICAgICAgLSAyMC4zLjYKICAgICAgICAgIC0gbGF0ZXN0CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvOTlhYjFlMTUwYzM3MDhjZTgxYmMwODA3M2NmNTc5M2VmNjdjNmExYy8yMC9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjAuMy41CiAgICBtYWpvclZlcnNpb246ICcyMC4zJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE4LTA1LTA0VDA5OjI5OjU2JwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMy1zbGltCiAgICAgICAgICAtIDIwLjMuNS1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC8xNjc3MjYzMjkxNWFiNWY0YTk1YmRlNmFiZGI5ZDFhZDcxZDUzZGRhLzIwL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy43JwogICAgICAgIHJlbGVhc2U6IDMuNwogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My43CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjMtYWxwaW5lCiAgICAgICAgICAtIDIwLjMuNS1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvMTY3NzI2MzI5MTVhYjVmNGE5NWJkZTZhYmRiOWQxYWQ3MWQ1M2RkYS8yMC9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzIwJwogICAgICAgICAgLSAnMjAuMycKICAgICAgICAgIC0gMjAuMy41CiAgICAgICAgICAtIGxhdGVzdAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzE2NzcyNjMyOTE1YWI1ZjRhOTViZGU2YWJkYjlkMWFkNzFkNTNkZGEvMjAvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDIwLjMuNAogICAgbWFqb3JWZXJzaW9uOiAnMjAuMycKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxOC0wNC0yMVQwOTowNTozOScKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBBbHBpbmUsIERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMC1zbGltCiAgICAgICAgICAtIDIwLjMtc2xpbQogICAgICAgICAgLSAyMC4zLjQtc2xpbQogICAgICAgICAgLSBzbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvNDQ0NTMxMmVhZDdlMWI0NDllZGY3YTJlZGE4ZDA1OGRhN2I2YTJhNy8yMC9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuNycKICAgICAgICByZWxlYXNlOiAzLjcKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuNwogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLWFscGluZQogICAgICAgICAgLSAyMC4zLWFscGluZQogICAgICAgICAgLSAyMC4zLjQtYWxwaW5lCiAgICAgICAgICAtIGFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzQ0NDUzMTJlYWQ3ZTFiNDQ5ZWRmN2EyZWRhOGQwNThkYTdiNmEyYTcvMjAvYWxwaW5lL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMCcKICAgICAgICAgIC0gJzIwLjMnCiAgICAgICAgICAtIDIwLjMuNAogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC80NDQ1MzEyZWFkN2UxYjQ0OWVkZjdhMmVkYThkMDU4ZGE3YjZhMmE3LzIwL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMC4zLjMKICAgIG1ham9yVmVyc2lvbjogJzIwLjMnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTgtMDQtMjBUMDk6MDQ6MTAnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtc2xpbQogICAgICAgICAgLSAyMC4zLXNsaW0KICAgICAgICAgIC0gMjAuMy4zLXNsaW0KICAgICAgICAgIC0gc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzAxNTM4YjBjODM1ZWU1MjcxMDdlZDg1YzZjMmY4NGU3ZDk3YjFlYzYvMjAvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogQWxwaW5lCiAgICAgICAgcmVsZWFzZU5hbWU6ICczLjcnCiAgICAgICAgcmVsZWFzZTogMy43CiAgICAgICAgd2VpZ2h0OiAxCiAgICAgICAgaW1hZ2U6IGFscGluZTozLjcKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMC1hbHBpbmUKICAgICAgICAgIC0gMjAuMy1hbHBpbmUKICAgICAgICAgIC0gMjAuMy4zLWFscGluZQogICAgICAgICAgLSBhbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC8wMTUzOGIwYzgzNWVlNTI3MTA3ZWQ4NWM2YzJmODRlN2Q5N2IxZWM2LzIwL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjAnCiAgICAgICAgICAtICcyMC4zJwogICAgICAgICAgLSAyMC4zLjMKICAgICAgICAgIC0gbGF0ZXN0CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvMDE1MzhiMGM4MzVlZTUyNzEwN2VkODVjNmMyZjg0ZTdkOTdiMWVjNi8yMC9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjAuMy4yCiAgICBtYWpvclZlcnNpb246ICcyMC4zJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE4LTAzLTIzVDAxOjAzOjE3JwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMC1zbGltCiAgICAgICAgICAtIDIwLjMtc2xpbQogICAgICAgICAgLSAyMC4zLjItc2xpbQogICAgICAgICAgLSBzbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvODFkMTQ0ODllZDdmNzQwMzg2ZTJmMDVkNzYyZGM1M2ZlMzRlNmY4Yi8yMC9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuNycKICAgICAgICByZWxlYXNlOiAzLjcKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuNwogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLWFscGluZQogICAgICAgICAgLSAyMC4zLWFscGluZQogICAgICAgICAgLSAyMC4zLjItYWxwaW5lCiAgICAgICAgICAtIGFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzgxZDE0NDg5ZWQ3Zjc0MDM4NmUyZjA1ZDc2MmRjNTNmZTM0ZTZmOGIvMjAvYWxwaW5lL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMCcKICAgICAgICAgIC0gJzIwLjMnCiAgICAgICAgICAtIDIwLjMuMgogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC84MWQxNDQ4OWVkN2Y3NDAzODZlMmYwNWQ3NjJkYzUzZmUzNGU2ZjhiLzIwL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMC4zLjEKICAgIG1ham9yVmVyc2lvbjogJzIwLjMnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTgtMDMtMTZUMjM6NDI6MjAnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMy1zbGltCiAgICAgICAgICAtIDIwLjMuMS1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9hODVmZTYwYjczMzJkNjY5ZDAwZTMyNTg4OGNjNzA3NTY2YmVkNDZiLzIwL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy43JwogICAgICAgIHJlbGVhc2U6IDMuNwogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My43CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjMtYWxwaW5lCiAgICAgICAgICAtIDIwLjMuMS1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvYTg1ZmU2MGI3MzMyZDY2OWQwMGUzMjU4ODhjYzcwNzU2NmJlZDQ2Yi8yMC9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzIwJwogICAgICAgICAgLSAnMjAuMycKICAgICAgICAgIC0gMjAuMy4xCiAgICAgICAgICAtIGxhdGVzdAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwL2E4NWZlNjBiNzMzMmQ2NjlkMDBlMzI1ODg4Y2M3MDc1NjZiZWQ0NmIvMjAvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246ICcyMC4zJwogICAgbWFqb3JWZXJzaW9uOiAnMjAuMycKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxOC0wMy0xNVQwMToxNjoyNCcKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBBbHBpbmUsIERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtc2xpbQogICAgICAgICAgLSAyMC4zLXNsaW0KICAgICAgICAgIC0gc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwL2M4YjEzZDM2MGNkZDk4MDcwYWJjOTA0MTkwM2NlZWZiOTQ5NTU5NjMvMjAvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogQWxwaW5lCiAgICAgICAgcmVsZWFzZU5hbWU6ICczLjcnCiAgICAgICAgcmVsZWFzZTogMy43CiAgICAgICAgd2VpZ2h0OiAxCiAgICAgICAgaW1hZ2U6IGFscGluZTozLjcKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMC1hbHBpbmUKICAgICAgICAgIC0gMjAuMy1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvYzhiMTNkMzYwY2RkOTgwNzBhYmM5MDQxOTAzY2VlZmI5NDk1NTk2My8yMC9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzIwJwogICAgICAgICAgLSAnMjAuMycKICAgICAgICAgIC0gbGF0ZXN0CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvYzhiMTNkMzYwY2RkOTgwNzBhYmM5MDQxOTAzY2VlZmI5NDk1NTk2My8yMC9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMjAuMi40CiAgICBtYWpvclZlcnNpb246ICcyMC4yJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE4LTAyLTIzVDAxOjM2OjU4JwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IEFscGluZSwgRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMC1zbGltCiAgICAgICAgICAtIDIwLjItc2xpbQogICAgICAgICAgLSAyMC4yLjQtc2xpbQogICAgICAgICAgLSBzbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvODNhNzQ3YWZiYTczOTU5MmJiNGQzZjhhMDFiNWQ1MzVjMWYyYzhkZC8yMC9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuNycKICAgICAgICByZWxlYXNlOiAzLjcKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuNwogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLWFscGluZQogICAgICAgICAgLSAyMC4yLWFscGluZQogICAgICAgICAgLSAyMC4yLjQtYWxwaW5lCiAgICAgICAgICAtIGFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzgzYTc0N2FmYmE3Mzk1OTJiYjRkM2Y4YTAxYjVkNTM1YzFmMmM4ZGQvMjAvYWxwaW5lL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMCcKICAgICAgICAgIC0gJzIwLjInCiAgICAgICAgICAtIDIwLjIuNAogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC84M2E3NDdhZmJhNzM5NTkyYmI0ZDNmOGEwMWI1ZDUzNWMxZjJjOGRkLzIwL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMC4yLjMKICAgIG1ham9yVmVyc2lvbjogJzIwLjInCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTgtMDItMTRUMDE6NTI6MTEnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogQWxwaW5lCiAgICAgICAgcmVsZWFzZU5hbWU6ICczLjcnCiAgICAgICAgcmVsZWFzZTogMy43CiAgICAgICAgd2VpZ2h0OiAxCiAgICAgICAgaW1hZ2U6IGFscGluZTozLjcKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMC1hbHBpbmUKICAgICAgICAgIC0gMjAuMi1hbHBpbmUKICAgICAgICAgIC0gMjAuMi4zLWFscGluZQogICAgICAgICAgLSBhbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC82NzM5YWZhYTQ3NDM1OTU1MTE3MzRiZDEzMmFhOGFiZGJmMzA3YzhjLzIwL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMi1zbGltCiAgICAgICAgICAtIDIwLjIuMy1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC8zOTQ1ZjRjZjY4ZmY0YjkxMjQ4MzUwODljMWM4NDcwZThkZWMzYjdkLzIwL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMCcKICAgICAgICAgIC0gJzIwLjInCiAgICAgICAgICAtIDIwLjIuMwogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC8zOTQ1ZjRjZjY4ZmY0YjkxMjQ4MzUwODljMWM4NDcwZThkZWMzYjdkLzIwL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMC4yLjIKICAgIG1ham9yVmVyc2lvbjogJzIwLjInCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTgtMDEtMjhUMDQ6MzE6MjknCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzIwJwogICAgICAgICAgLSAnMjAuMicKICAgICAgICAgIC0gMjAuMi4yCiAgICAgICAgICAtIGxhdGVzdAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwL2Y2NjA2Mzg5Yjk5NWQyNGRjZTg5MzNlNGNhNGQ2ZDQ2ZmNlODYxMmIvMjAvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMC1zbGltCiAgICAgICAgICAtIDIwLjItc2xpbQogICAgICAgICAgLSAyMC4yLjItc2xpbQogICAgICAgICAgLSBzbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvOTFmNTVmOWE2OTkyNWU3ZmMxNmI0NjdjMTU1ODk3YmJlODY0NmYxMi8yMC9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuNicKICAgICAgICByZWxlYXNlOiAzLjYKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuNgogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLWFscGluZQogICAgICAgICAgLSAyMC4yLWFscGluZQogICAgICAgICAgLSAyMC4yLjItYWxwaW5lCiAgICAgICAgICAtIGFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzkxZjU1ZjlhNjk5MjVlN2ZjMTZiNDY3YzE1NTg5N2JiZTg2NDZmMTIvMjAvYWxwaW5lL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuNycKICAgICAgICByZWxlYXNlOiAzLjcKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuNwogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLWFscGluZQogICAgICAgICAgLSAyMC4yLWFscGluZQogICAgICAgICAgLSAyMC4yLjItYWxwaW5lCiAgICAgICAgICAtIGFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzdiZWQ2MmUzMGE0ZTY1NTdjMTQ2YjI4NjU0MTNjOWNlOTI0MzY2YmUvMjAvYWxwaW5lL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMC4yLjEKICAgIG1ham9yVmVyc2lvbjogJzIwLjInCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTctMTItMTVUMTg6MzU6NTQnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMi1zbGltCiAgICAgICAgICAtIDIwLjIuMS1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9lOWNmNzBiZWQwZmVlOWU2MzkxODE4ZDA1Njk4NTQ5ZWJkMDVhZDczLzIwL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy42JwogICAgICAgIHJlbGVhc2U6IDMuNgogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My42CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjItYWxwaW5lCiAgICAgICAgICAtIDIwLjIuMS1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvZTljZjcwYmVkMGZlZTllNjM5MTgxOGQwNTY5ODU0OWViZDA1YWQ3My8yMC9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMCcKICAgICAgICAgIC0gJzIwLjInCiAgICAgICAgICAtIDIwLjIuMQogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9lOWNmNzBiZWQwZmVlOWU2MzkxODE4ZDA1Njk4NTQ5ZWJkMDVhZDczLzIwL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAnMjAuMicKICAgIG1ham9yVmVyc2lvbjogJzIwLjInCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTctMTItMTNUMTA6MDY6NDAnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMi1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC84MWE2MGJlZTRhNzdlNjEyN2VmNDAwMDlkMzMxNGYxMjM3Nzk5YjQwLzIwL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy42JwogICAgICAgIHJlbGVhc2U6IDMuNgogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My42CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjItYWxwaW5lCiAgICAgICAgICAtIGFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzgxYTYwYmVlNGE3N2U2MTI3ZWY0MDAwOWQzMzE0ZjEyMzc3OTliNDAvMjAvYWxwaW5lL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjAnCiAgICAgICAgICAtICcyMC4yJwogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC84MWE2MGJlZTRhNzdlNjEyN2VmNDAwMDlkMzMxNGYxMjM3Nzk5YjQwLzIwL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMC4xLjcKICAgIG1ham9yVmVyc2lvbjogJzIwLjEnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTctMTEtMjVUMDE6MzQ6NTMnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMS1zbGltCiAgICAgICAgICAtIDIwLjEuNy1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9iNDU4MTI1ZTQzMzY2ODBjNmRlNzMxYzA5MDQxYzlhMTM4MTNlYjUwLzIwL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy42JwogICAgICAgIHJlbGVhc2U6IDMuNgogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My42CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjEtYWxwaW5lCiAgICAgICAgICAtIDIwLjEuNy1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvYjQ1ODEyNWU0MzM2NjgwYzZkZTczMWMwOTA0MWM5YTEzODEzZWI1MC8yMC9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMCcKICAgICAgICAgIC0gJzIwLjEnCiAgICAgICAgICAtIDIwLjEuNwogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9iNDU4MTI1ZTQzMzY2ODBjNmRlNzMxYzA5MDQxYzlhMTM4MTNlYjUwLzIwL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMC4xLjYKICAgIG1ham9yVmVyc2lvbjogJzIwLjEnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTctMTEtMjJUMDM6MDM6NTEnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMS1zbGltCiAgICAgICAgICAtIDIwLjEuNi1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC80ZTg4NGNmY2VhYzRhNjEwMzI4MGMyOTlmYzIyNWE4NDg0NTgxZTY5LzIwL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy42JwogICAgICAgIHJlbGVhc2U6IDMuNgogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My42CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjEtYWxwaW5lCiAgICAgICAgICAtIDIwLjEuNi1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvNGU4ODRjZmNlYWM0YTYxMDMyODBjMjk5ZmMyMjVhODQ4NDU4MWU2OS8yMC9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMCcKICAgICAgICAgIC0gJzIwLjEnCiAgICAgICAgICAtIDIwLjEuNgogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC80ZTg4NGNmY2VhYzRhNjEwMzI4MGMyOTlmYzIyNWE4NDg0NTgxZTY5LzIwL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMC4xLjUKICAgIG1ham9yVmVyc2lvbjogJzIwLjEnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTctMTEtMTRUMDE6Mzc6MjcnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMS1zbGltCiAgICAgICAgICAtIDIwLjEuNS1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC8xYjVkMTQ2NjNjZmZhMjRjMjU1ZWIxOTkwMmY2YmMzYjdmNTQ2YjQ5LzIwL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy42JwogICAgICAgIHJlbGVhc2U6IDMuNgogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My42CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjEtYWxwaW5lCiAgICAgICAgICAtIDIwLjEuNS1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvMWI1ZDE0NjYzY2ZmYTI0YzI1NWViMTk5MDJmNmJjM2I3ZjU0NmI0OS8yMC9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMCcKICAgICAgICAgIC0gJzIwLjEnCiAgICAgICAgICAtIDIwLjEuNQogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC8xYjVkMTQ2NjNjZmZhMjRjMjU1ZWIxOTkwMmY2YmMzYjdmNTQ2YjQ5LzIwL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMC4xLjQKICAgIG1ham9yVmVyc2lvbjogJzIwLjEnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTctMTEtMDNUMDk6MzA6MDMnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMS1zbGltCiAgICAgICAgICAtIDIwLjEuNC1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC8zMWQ3ZjI2NGY2YjZjODVhZGMxMDUyMDg4NDZmNjM4NGQ3ZDgwYTliLzIwL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy42JwogICAgICAgIHJlbGVhc2U6IDMuNgogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My42CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjEtYWxwaW5lCiAgICAgICAgICAtIDIwLjEuNC1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvMzFkN2YyNjRmNmI2Yzg1YWRjMTA1MjA4ODQ2ZjYzODRkN2Q4MGE5Yi8yMC9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMCcKICAgICAgICAgIC0gJzIwLjEnCiAgICAgICAgICAtIDIwLjEuNAogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC8zMWQ3ZjI2NGY2YjZjODVhZGMxMDUyMDg4NDZmNjM4NGQ3ZDgwYTliLzIwL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMC4xLjMKICAgIG1ham9yVmVyc2lvbjogJzIwLjEnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTctMTAtMjdUMDQ6MzM6MjcnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMS1zbGltCiAgICAgICAgICAtIDIwLjEuMy1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9mYmNkN2Q0ZjI3MmU2ZTJkODFiZmQxMjA2ZDZjNjQ4Y2U2YzdlOTNjLzIwL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy42JwogICAgICAgIHJlbGVhc2U6IDMuNgogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My42CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjEtYWxwaW5lCiAgICAgICAgICAtIDIwLjEuMy1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvZmJjZDdkNGYyNzJlNmUyZDgxYmZkMTIwNmQ2YzY0OGNlNmM3ZTkzYy8yMC9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMCcKICAgICAgICAgIC0gJzIwLjEnCiAgICAgICAgICAtIDIwLjEuMwogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9mYmNkN2Q0ZjI3MmU2ZTJkODFiZmQxMjA2ZDZjNjQ4Y2U2YzdlOTNjLzIwL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMC4xLjIKICAgIG1ham9yVmVyc2lvbjogJzIwLjEnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTctMTAtMTJUMDE6MzQ6MjcnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMS1zbGltCiAgICAgICAgICAtIDIwLjEuMi1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC8xNGU4ZDkyZjE5MGUwZWM3NzE3MDdiZThiZjdjZDRiMzVhMTA4MjcyLzIwL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy42JwogICAgICAgIHJlbGVhc2U6IDMuNgogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My42CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjEtYWxwaW5lCiAgICAgICAgICAtIDIwLjEuMi1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvMTRlOGQ5MmYxOTBlMGVjNzcxNzA3YmU4YmY3Y2Q0YjM1YTEwODI3Mi8yMC9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMCcKICAgICAgICAgIC0gJzIwLjEnCiAgICAgICAgICAtIDIwLjEuMgogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC8xNGU4ZDkyZjE5MGUwZWM3NzE3MDdiZThiZjdjZDRiMzVhMTA4MjcyLzIwL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMC4xLjEKICAgIG1ham9yVmVyc2lvbjogJzIwLjEnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTctMTAtMDNUMTM6Mzg6NDAnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMS1zbGltCiAgICAgICAgICAtIDIwLjEuMS1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC84YTc3Yjg1N2Q0MjNhNzllNDNlOWRhZGRkZGNiZjNjZDFlZDRkYmNjLzIwL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy42JwogICAgICAgIHJlbGVhc2U6IDMuNgogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My42CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjEtYWxwaW5lCiAgICAgICAgICAtIDIwLjEuMS1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvOGE3N2I4NTdkNDIzYTc5ZTQzZTlkYWRkZGRjYmYzY2QxZWQ0ZGJjYy8yMC9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMCcKICAgICAgICAgIC0gJzIwLjEnCiAgICAgICAgICAtIDIwLjEuMQogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC84YTc3Yjg1N2Q0MjNhNzllNDNlOWRhZGRkZGNiZjNjZDFlZDRkYmNjLzIwL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAnMjAuMScKICAgIG1ham9yVmVyc2lvbjogJzIwLjEnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTctMDktMjdUMDI6MDI6MjInCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMS1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9hZjYyMDY0Y2IyYjk0ODBkY2EwMDY2Njc5ODJiYThhNjAxMmE0NWY2LzIwL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy42JwogICAgICAgIHJlbGVhc2U6IDMuNgogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My42CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjEtYWxwaW5lCiAgICAgICAgICAtIGFscGluZQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwL2FmNjIwNjRjYjJiOTQ4MGRjYTAwNjY2Nzk4MmJhOGE2MDEyYTQ1ZjYvMjAvYWxwaW5lL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMjAnCiAgICAgICAgICAtICcyMC4xJwogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9hZjYyMDY0Y2IyYjk0ODBkY2EwMDY2Njc5ODJiYThhNjAxMmE0NWY2LzIwL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMC4wLjUKICAgIG1ham9yVmVyc2lvbjogJzIwLjAnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTctMDktMTVUMTg6NDA6NDAnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMC1zbGltCiAgICAgICAgICAtIDIwLjAuNS1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC83NmUyMGFhNGNlZGZiOTFjMTkyNzU5ZWY0ZTZjMTE2NGNjNzlhZWNlLzIwL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy42JwogICAgICAgIHJlbGVhc2U6IDMuNgogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My42CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjAuNS1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvNzZlMjBhYTRjZWRmYjkxYzE5Mjc1OWVmNGU2YzExNjRjYzc5YWVjZS8yMC9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMCcKICAgICAgICAgIC0gJzIwLjAnCiAgICAgICAgICAtIDIwLjAuNQogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC83NmUyMGFhNGNlZGZiOTFjMTkyNzU5ZWY0ZTZjMTE2NGNjNzlhZWNlLzIwL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMC4wLjQKICAgIG1ham9yVmVyc2lvbjogJzIwLjAnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTctMDktMDZUMTQ6MzQ6NTcnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMC1zbGltCiAgICAgICAgICAtIDIwLjAuNC1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9lN2QxNDVjOTE1NDU4ZTViYmI4NTdhNTdjOWFhZDcxMjVmOTVhODUzLzIwL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy42JwogICAgICAgIHJlbGVhc2U6IDMuNgogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My42CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjAuNC1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvZTdkMTQ1YzkxNTQ1OGU1YmJiODU3YTU3YzlhYWQ3MTI1Zjk1YTg1My8yMC9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMCcKICAgICAgICAgIC0gJzIwLjAnCiAgICAgICAgICAtIDIwLjAuNAogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9lN2QxNDVjOTE1NDU4ZTViYmI4NTdhNTdjOWFhZDcxMjVmOTVhODUzLzIwL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMC4wLjMKICAgIG1ham9yVmVyc2lvbjogJzIwLjAnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTctMDgtMjRUMTI6NTY6MTEnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogQWxwaW5lCiAgICAgICAgcmVsZWFzZU5hbWU6ICczLjYnCiAgICAgICAgcmVsZWFzZTogMy42CiAgICAgICAgd2VpZ2h0OiAxCiAgICAgICAgaW1hZ2U6IGFscGluZTozLjYKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMC1hbHBpbmUKICAgICAgICAgIC0gMjAuMC1hbHBpbmUKICAgICAgICAgIC0gMjAuMC4zLWFscGluZQogICAgICAgICAgLSBhbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC82N2U2YzVmODc3NmQzOWFiMjJlODQzYWQzY2JmMmJjOTU1NWU5OWU3LzIwL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzIwJwogICAgICAgICAgLSAnMjAuMCcKICAgICAgICAgIC0gMjAuMC4zCiAgICAgICAgICAtIGxhdGVzdAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzhlNjg0NDZjMTdhYWY1YmQzYzZhYjIwNGI5MjBjYjAxZjI2OTQzOGYvMjAvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMC1zbGltCiAgICAgICAgICAtIDIwLjAtc2xpbQogICAgICAgICAgLSAyMC4wLjMtc2xpbQogICAgICAgICAgLSBzbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvNWE0ZTNmNDJiYmU0YTI0YmJhOGFlODgxMjE5NGY0MTY3MjE5MTNlZS8yMC9zbGltL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMC4wLjIKICAgIG1ham9yVmVyc2lvbjogJzIwLjAnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTctMDctMjhUMDM6MzI6MTQnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLXNsaW0KICAgICAgICAgIC0gMjAuMC1zbGltCiAgICAgICAgICAtIDIwLjAuMi1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC8xYTk0YjdkMjNjNWU3ZDRiOTdlMGMyMTBkYjhmZjdjMjZhNjBlMGFjLzIwL3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IEFscGluZQogICAgICAgIHJlbGVhc2VOYW1lOiAnMy42JwogICAgICAgIHJlbGVhc2U6IDMuNgogICAgICAgIHdlaWdodDogMQogICAgICAgIGltYWdlOiBhbHBpbmU6My42CiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjAtYWxwaW5lCiAgICAgICAgICAtIDIwLjAuMi1hbHBpbmUKICAgICAgICAgIC0gYWxwaW5lCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvMWE5NGI3ZDIzYzVlN2Q0Yjk3ZTBjMjEwZGI4ZmY3YzI2YTYwZTBhYy8yMC9hbHBpbmUvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcyMCcKICAgICAgICAgIC0gJzIwLjAnCiAgICAgICAgICAtIDIwLjAuMgogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC8xYTk0YjdkMjNjNWU3ZDRiOTdlMGMyMTBkYjhmZjdjMjZhNjBlMGFjLzIwL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAyMC4wLjEKICAgIG1ham9yVmVyc2lvbjogJzIwLjAnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTctMDctMDVUMTA6MjA6MDgnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogQWxwaW5lLCBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLjAuMS1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvMjUyMjRiOWY3YjExYWY5ZGI0MDRjOTc0MzM0ODM2MTlmZGZlZDAyYi8yMC9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBBbHBpbmUKICAgICAgICByZWxlYXNlTmFtZTogJzMuNicKICAgICAgICByZWxlYXNlOiAzLjYKICAgICAgICB3ZWlnaHQ6IDEKICAgICAgICBpbWFnZTogYWxwaW5lOjMuNgogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDIwLjAuMS1hbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC8yNTIyNGI5ZjdiMTFhZjlkYjQwNGM5NzQzMzQ4MzYxOWZkZmVkMDJiLzIwL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAuMC4xCiAgICAgICAgICAtIGxhdGVzdAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzI1MjI0YjlmN2IxMWFmOWRiNDA0Yzk3NDMzNDgzNjE5ZmRmZWQwMmIvMjAvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246ICcyMC4wJwogICAgbWFqb3JWZXJzaW9uOiAnMjAuMCcKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxNy0wNi0wNlQxMDo0NDowOScKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBBbHBpbmUsIERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAuMC1yYzItc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzYwMjc5ZGYxMWY0ZjExYWJmZGNlMTU1OTlkMjRhZDczYzFhZWZiZTEvMjAvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogQWxwaW5lCiAgICAgICAgcmVsZWFzZU5hbWU6ICczLjYnCiAgICAgICAgcmVsZWFzZTogMy42CiAgICAgICAgd2VpZ2h0OiAxCiAgICAgICAgaW1hZ2U6IGFscGluZTozLjYKICAgICAgICB0YWdzOgogICAgICAgICAgLSAyMC4wLXJjMi1hbHBpbmUKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC82MDI3OWRmMTFmNGYxMWFiZmRjZTE1NTk5ZDI0YWQ3M2MxYWVmYmUxLzIwL2FscGluZS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMjAuMC1yYzIKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC82MDI3OWRmMTFmNGYxMWFiZmRjZTE1NTk5ZDI0YWQ3M2MxYWVmYmUxLzIwL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAxOS4zLjYuMTMKICAgIG1ham9yVmVyc2lvbjogJzE5LjMnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTktMDEtMTFUMTE6Mjg6MDknCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDE5LXNsaW0KICAgICAgICAgIC0gMTkuMy1zbGltCiAgICAgICAgICAtIDE5LjMuNi1zbGltCiAgICAgICAgICAtIDE5LjMuNi4xMy1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvN2I5ZTFkNTRjZjkzZjUzYjlhY2UyMWI5MTAzNTg4Yzc3YzE5OGQyZi8xOS9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcxOScKICAgICAgICAgIC0gJzE5LjMnCiAgICAgICAgICAtIDE5LjMuNgogICAgICAgICAgLSAxOS4zLjYuMTMKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC83YjllMWQ1NGNmOTNmNTNiOWFjZTIxYjkxMDM1ODhjNzdjMTk4ZDJmLzE5L0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAxOS4zLjYuMTIKICAgIG1ham9yVmVyc2lvbjogJzE5LjMnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTgtMTAtMTVUMTQ6MzE6MTMnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAxOS1zbGltCiAgICAgICAgICAtIDE5LjMtc2xpbQogICAgICAgICAgLSAxOS4zLjYtc2xpbQogICAgICAgICAgLSAxOS4zLjYuMTItc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2RjNTRmYjhkMTczN2Y0OTM3NDgxNzZkZjEwYzRhZjFiNDJlMWU3YjUvMTkvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzE5JwogICAgICAgICAgLSAnMTkuMycKICAgICAgICAgIC0gMTkuMy42CiAgICAgICAgICAtIDE5LjMuNi4xMgogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2RjNTRmYjhkMTczN2Y0OTM3NDgxNzZkZjEwYzRhZjFiNDJlMWU3YjUvMTkvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA5IChzdHJldGNoKQogICAgICAgIHJlbGVhc2U6IDkuMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDE5LXNsaW0KICAgICAgICAgIC0gMTkuMy1zbGltCiAgICAgICAgICAtIDE5LjMuNi1zbGltCiAgICAgICAgICAtIDE5LjMuNi4xMi1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvYmE4MTUyNzU0NGRhZjUwZDI3YTg1YjFhNjAwMWNjNTQxYjc0MjA4OS8xOS9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOSAoc3RyZXRjaCkKICAgICAgICByZWxlYXNlOiA5LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6c3RyZXRjaAogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcxOScKICAgICAgICAgIC0gJzE5LjMnCiAgICAgICAgICAtIDE5LjMuNgogICAgICAgICAgLSAxOS4zLjYuMTIKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9iYTgxNTI3NTQ0ZGFmNTBkMjdhODViMWE2MDAxY2M1NDFiNzQyMDg5LzE5L0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAxOS4zLjYuMTEKICAgIG1ham9yVmVyc2lvbjogJzE5LjMnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTgtMDktMjFUMDA6MTk6MDQnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAxOS1zbGltCiAgICAgICAgICAtIDE5LjMtc2xpbQogICAgICAgICAgLSAxOS4zLjYtc2xpbQogICAgICAgICAgLSAxOS4zLjYuMTEtc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2YwMDEwYmIxNmU3ZjU2YmRmYmJjODIwNTcyY2MyNDFjNzI3MmIxMzEvMTkvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzE5JwogICAgICAgICAgLSAnMTkuMycKICAgICAgICAgIC0gMTkuMy42CiAgICAgICAgICAtIDE5LjMuNi4xMQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2YwMDEwYmIxNmU3ZjU2YmRmYmJjODIwNTcyY2MyNDFjNzI3MmIxMzEvMTkvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDE5LjMuNi4xMAogICAgbWFqb3JWZXJzaW9uOiAnMTkuMycKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxOC0wOC0xMlQwNzo1NTowMicKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDE5LXNsaW0KICAgICAgICAgIC0gMTkuMy1zbGltCiAgICAgICAgICAtIDE5LjMuNi1zbGltCiAgICAgICAgICAtIDE5LjMuNi4xMC1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZmU1MDVjYjZhYTlhZmM1MDlhZGQzMTgyNWI3ZjE3MzRhMDE2M2MwNC8xOS9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMTknCiAgICAgICAgICAtICcxOS4zJwogICAgICAgICAgLSAxOS4zLjYKICAgICAgICAgIC0gMTkuMy42LjEwCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZmU1MDVjYjZhYTlhZmM1MDlhZGQzMTgyNWI3ZjE3MzRhMDE2M2MwNC8xOS9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMTkuMy42LjkKICAgIG1ham9yVmVyc2lvbjogJzE5LjMnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTgtMDYtMDVUMjI6MTI6NDcnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcxOScKICAgICAgICAgIC0gJzE5LjMnCiAgICAgICAgICAtIDE5LjMuNgogICAgICAgICAgLSAxOS4zLjYuOQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2U1YjAzM2U1NGM2NTRiNzhkOWRhOGViMzI1OWM5ZTNmNzM4Mjg3MGYvMTkvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAxOS1zbGltCiAgICAgICAgICAtIDE5LjMtc2xpbQogICAgICAgICAgLSAxOS4zLjYtc2xpbQogICAgICAgICAgLSAxOS4zLjYuOS1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvYTdkNGE4ODM0YzQ1ZjdlNWFmOTZiYTIzN2YyODY5ZGVmMWVlYzQ0Mi8xOS9zbGltL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAxOS4zLjYuOAogICAgbWFqb3JWZXJzaW9uOiAnMTkuMycKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxOC0wNS0wOVQwOTowOTo0NScKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDE5LXNsaW0KICAgICAgICAgIC0gMTkuMy1zbGltCiAgICAgICAgICAtIDE5LjMuNi1zbGltCiAgICAgICAgICAtIDE5LjMuNi44LXNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9hNGIzZmZlNzdiNjdmNjMzMGY3MmY1YWVmN2M2MzljOTg1ZmRhZDk0LzE5L3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcxOScKICAgICAgICAgIC0gJzE5LjMnCiAgICAgICAgICAtIDE5LjMuNgogICAgICAgICAgLSAxOS4zLjYuOAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2EwYjllOTllYmFjZmE5MmE5NzIyNGE2NTdhODhiZDY3Yjk4NzcwMDgvMTkvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDE5LjMuNi43CiAgICBtYWpvclZlcnNpb246ICcxOS4zJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE4LTAzLTIzVDAxOjAzOjE3JwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMTktc2xpbQogICAgICAgICAgLSAxOS4zLXNsaW0KICAgICAgICAgIC0gMTkuMy42LXNsaW0KICAgICAgICAgIC0gMTkuMy42Ljctc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzU4M2U1MWUzYThhYmY3OTVhOTliMjYxM2IxOTY3NDY5ZDRjMWUxOGEvMTkvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzE5JwogICAgICAgICAgLSAnMTkuMycKICAgICAgICAgIC0gMTkuMy42CiAgICAgICAgICAtIDE5LjMuNi43CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvNTgzZTUxZTNhOGFiZjc5NWE5OWIyNjEzYjE5Njc0NjlkNGMxZTE4YS8xOS9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMTkuMy42LjYKICAgIG1ham9yVmVyc2lvbjogJzE5LjMnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTgtMDMtMDVUMjA6MDY6MjInCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAxOS1zbGltCiAgICAgICAgICAtIDE5LjMtc2xpbQogICAgICAgICAgLSAxOS4zLjYtc2xpbQogICAgICAgICAgLSAxOS4zLjYuNi1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvYmVkZTgxOTllMzI2M2U5MzY2ODc1NDJhMDQ5Mjc3NGIzNTEyMjk2YS8xOS9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMTknCiAgICAgICAgICAtICcxOS4zJwogICAgICAgICAgLSAxOS4zLjYKICAgICAgICAgIC0gMTkuMy42LjYKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9iZWRlODE5OWUzMjYzZTkzNjY4NzU0MmEwNDkyNzc0YjM1MTIyOTZhLzE5L0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAxOS4zLjYuNQogICAgbWFqb3JWZXJzaW9uOiAnMTkuMycKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxOC0wMi0xNFQwMTo1MjoxMScKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzE5JwogICAgICAgICAgLSAnMTkuMycKICAgICAgICAgIC0gMTkuMy42CiAgICAgICAgICAtIDE5LjMuNi41CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvZjY2MDYzODliOTk1ZDI0ZGNlODkzM2U0Y2E0ZDZkNDZmY2U4NjEyYi8xOS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDE5LXNsaW0KICAgICAgICAgIC0gMTkuMy1zbGltCiAgICAgICAgICAtIDE5LjMuNi1zbGltCiAgICAgICAgICAtIDE5LjMuNi41LXNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC82ZTIwODhkNDkzZTZmNTBiODJjMGU0MTZjNzJhMmRkOTE0ZTg0ZmQyLzE5L3NsaW0vRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDE5LjMuNi40CiAgICBtYWpvclZlcnNpb246ICcxOS4zJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE3LTExLTI1VDAxOjM0OjUzJwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMTktc2xpbQogICAgICAgICAgLSAxOS4zLXNsaW0KICAgICAgICAgIC0gMTkuMy42LXNsaW0KICAgICAgICAgIC0gMTkuMy42LjQtc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwL2YyYTcyYTg5ZTc2NGJmYWIwM2E5ZjYwMThmNjI4YzYzZWU3NjMyYjgvMTkvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzE5JwogICAgICAgICAgLSAnMTkuMycKICAgICAgICAgIC0gMTkuMy42CiAgICAgICAgICAtIDE5LjMuNi40CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvZjJhNzJhODllNzY0YmZhYjAzYTlmNjAxOGY2MjhjNjNlZTc2MzJiOC8xOS9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMTkuMy42LjMKICAgIG1ham9yVmVyc2lvbjogJzE5LjMnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTctMTAtMDVUMTM6Mzc6NTknCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAxOS1zbGltCiAgICAgICAgICAtIDE5LjMtc2xpbQogICAgICAgICAgLSAxOS4zLjYtc2xpbQogICAgICAgICAgLSAxOS4zLjYuMy1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvYTlkN2EwYzNjYzEyOWYwZTNkMmY0ZWMwY2Y5NTdhNDMyYjdkNjUyZS8xOS9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMTknCiAgICAgICAgICAtICcxOS4zJwogICAgICAgICAgLSAxOS4zLjYKICAgICAgICAgIC0gMTkuMy42LjMKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9hOWQ3YTBjM2NjMTI5ZjBlM2QyZjRlYzBjZjk1N2E0MzJiN2Q2NTJlLzE5L0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAxOS4zLjYuMgogICAgbWFqb3JWZXJzaW9uOiAnMTkuMycKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxNy0wOS0wNlQxNDozNDo1NycKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDE5LXNsaW0KICAgICAgICAgIC0gMTkuMy1zbGltCiAgICAgICAgICAtIDE5LjMuNi1zbGltCiAgICAgICAgICAtIDE5LjMuNi4yLXNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9lN2QxNDVjOTE1NDU4ZTViYmI4NTdhNTdjOWFhZDcxMjVmOTVhODUzLzE5L3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcxOScKICAgICAgICAgIC0gJzE5LjMnCiAgICAgICAgICAtIDE5LjMuNgogICAgICAgICAgLSAxOS4zLjYuMgogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwL2U3ZDE0NWM5MTU0NThlNWJiYjg1N2E1N2M5YWFkNzEyNWY5NWE4NTMvMTkvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDE5LjMuNi4xCiAgICBtYWpvclZlcnNpb246ICcxOS4zJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE3LTA2LTI4VDE4OjMzOjExJwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMTktc2xpbQogICAgICAgICAgLSAxOS4zLXNsaW0KICAgICAgICAgIC0gMTkuMy42LjEtc2xpbQogICAgICAgICAgLSBzbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvZmQ1MzRjMjhmMzA4NjFkODUzNmZiMGY3NDUyMDUxYTE3ZjQ1MjI0My8xOS9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMTknCiAgICAgICAgICAtICcxOS4zJwogICAgICAgICAgLSAxOS4zLjYuMQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwL2ZkNTM0YzI4ZjMwODYxZDg1MzZmYjBmNzQ1MjA1MWExN2Y0NTIyNDMvMTkvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDE5LjMuNgogICAgbWFqb3JWZXJzaW9uOiAnMTkuMycKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxNy0wNi0xMFQwMjo0NDo1MycKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDE5LXNsaW0KICAgICAgICAgIC0gMTkuMy1zbGltCiAgICAgICAgICAtIDE5LjMuNi1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9iZDRkYjRkNDU0ZTQxMGM5MmYwMDEyNWZmZDdiNGY5ZGI4ZmY2YThiLzE5L3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcxOScKICAgICAgICAgIC0gJzE5LjMnCiAgICAgICAgICAtIDE5LjMuNgogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9iZDRkYjRkNDU0ZTQxMGM5MmYwMDEyNWZmZDdiNGY5ZGI4ZmY2YThiLzE5L0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAxOS4zLjUKICAgIG1ham9yVmVyc2lvbjogJzE5LjMnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTctMDYtMDZUMTA6NDQ6MDknCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAxOS1zbGltCiAgICAgICAgICAtIDE5LjMtc2xpbQogICAgICAgICAgLSAxOS4zLjUtc2xpbQogICAgICAgICAgLSBzbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvN2IwZTQyZTYxOWI0NmQ4N2ZlNmM0MWEwMThkY2I3ZTA2NWU2YjBlZC8xOS9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMTknCiAgICAgICAgICAtICcxOS4zJwogICAgICAgICAgLSAxOS4zLjUKICAgICAgICAgIC0gbGF0ZXN0CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvN2IwZTQyZTYxOWI0NmQ4N2ZlNmM0MWEwMThkY2I3ZTA2NWU2YjBlZC8xOS9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMTkuMy4zCiAgICBtYWpvclZlcnNpb246ICcxOS4zJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE3LTA1LTAzVDEyOjMyOjUzJwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMTktc2xpbQogICAgICAgICAgLSAxOS4zLXNsaW0KICAgICAgICAgIC0gMTkuMy4zLXNsaW0KICAgICAgICAgIC0gc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzIzMmU4ZWRhNGExZjAwZmZkOWY0MTdmODZhNDIxMmZhNGQzOWU0NDEvMTkvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzE5JwogICAgICAgICAgLSAnMTkuMycKICAgICAgICAgIC0gMTkuMy4zCiAgICAgICAgICAtIGxhdGVzdAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzIzMmU4ZWRhNGExZjAwZmZkOWY0MTdmODZhNDIxMmZhNGQzOWU0NDEvMTkvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDE5LjMuMQogICAgbWFqb3JWZXJzaW9uOiAnMTkuMycKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxNy0wNC0wNVQyMjo0MTo1NycKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDE5LXNsaW0KICAgICAgICAgIC0gMTkuMy1zbGltCiAgICAgICAgICAtIDE5LjMuMS1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC8zZDUwNTg5ZmE2NmFlZGRhM2JmMTE0MTljZDgxZmRhZGY1Y2M2ZWUzLzE5L3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcxOScKICAgICAgICAgIC0gJzE5LjMnCiAgICAgICAgICAtIDE5LjMuMQogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC8zZDUwNTg5ZmE2NmFlZGRhM2JmMTE0MTljZDgxZmRhZGY1Y2M2ZWUzLzE5L0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAnMTkuMycKICAgIG1ham9yVmVyc2lvbjogJzE5LjMnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTctMDMtMThUMTE6Mzg6NTQnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAxOS1zbGltCiAgICAgICAgICAtIDE5LjMtc2xpbQogICAgICAgICAgLSBzbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvOTU4NDM1MGU5NmE2ZmVkMDI4ZWQ4NTgzMTJkOGRlNDNhMGUyMzhlMC8xOS9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMTknCiAgICAgICAgICAtICcxOS4zJwogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC85NTg0MzUwZTk2YTZmZWQwMjhlZDg1ODMxMmQ4ZGU0M2EwZTIzOGUwLzE5L0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAxOS4yLjMKICAgIG1ham9yVmVyc2lvbjogJzE5LjInCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTctMDItMThUMTU6MzY6MzUnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAxOS1zbGltCiAgICAgICAgICAtIDE5LjItc2xpbQogICAgICAgICAgLSAxOS4yLjMtc2xpbQogICAgICAgICAgLSBzbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvNTk2MmQ0ZDcyOTFiMjY4ZWZmOGZmMjUxMzYzN2VlZGFiZTlmZTkwZi8xOS9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMTknCiAgICAgICAgICAtICcxOS4yJwogICAgICAgICAgLSAxOS4yLjMKICAgICAgICAgIC0gbGF0ZXN0CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvNTk2MmQ0ZDcyOTFiMjY4ZWZmOGZmMjUxMzYzN2VlZGFiZTlmZTkwZi8xOS9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMTkuMi4yCiAgICBtYWpvclZlcnNpb246ICcxOS4yJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE3LTAyLTAyVDIzOjMwOjA1JwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMTktc2xpbQogICAgICAgICAgLSAxOS4yLXNsaW0KICAgICAgICAgIC0gMTkuMi4yLXNsaW0KICAgICAgICAgIC0gc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzFiMDNmZGQ4M2VjNzY5ZTc5NjJlYzBkY2UwMWUyNTYxM2E0NmRhY2YvMTkvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzE5JwogICAgICAgICAgLSAnMTkuMicKICAgICAgICAgIC0gMTkuMi4yCiAgICAgICAgICAtIGxhdGVzdAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzFiMDNmZGQ4M2VjNzY5ZTc5NjJlYzBkY2UwMWUyNTYxM2E0NmRhY2YvMTkvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246ICcxOS4yJwogICAgbWFqb3JWZXJzaW9uOiAnMTkuMicKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxNi0xMi0xNVQxNDoxOTowMicKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDE5LXNsaW0KICAgICAgICAgIC0gMTkuMi1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9mNTJmOTdkYmQxMjhmMmVjYTNlZWU4NmIzNDcxYjRlNmVmNmQ4NTk0LzE5L3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcxOScKICAgICAgICAgIC0gJzE5LjInCiAgICAgICAgICAtIGxhdGVzdAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwL2Y1MmY5N2RiZDEyOGYyZWNhM2VlZTg2YjM0NzFiNGU2ZWY2ZDg1OTQvMTkvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDE5LjEuNgogICAgbWFqb3JWZXJzaW9uOiAnMTkuMScKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxNi0xMS0xNFQxMzo1OTo1MCcKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDE5LXNsaW0KICAgICAgICAgIC0gMTkuMS1zbGltCiAgICAgICAgICAtIDE5LjEuNi1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC8wMmMxZjZlYWFlMzUwNDkyYmY3NGE5YTI2MWI5NjM5YjE3YWU1MjRlLzE5L3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcxOScKICAgICAgICAgIC0gJzE5LjEnCiAgICAgICAgICAtIDE5LjEuNgogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC8wMmMxZjZlYWFlMzUwNDkyYmY3NGE5YTI2MWI5NjM5YjE3YWU1MjRlLzE5L0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAxOS4xLjUKICAgIG1ham9yVmVyc2lvbjogJzE5LjEnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTYtMTEtMDFUMjA6NTQ6MDQnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAxOS1zbGltCiAgICAgICAgICAtIDE5LjEtc2xpbQogICAgICAgICAgLSAxOS4xLjUtc2xpbQogICAgICAgICAgLSBzbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvNWUxMzk5YjY1YTQ4YzgxNTk1YjVlYzU4YjBlM2Y3MDQ0NGMzMDY3Zi8xOS9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMTknCiAgICAgICAgICAtICcxOS4xJwogICAgICAgICAgLSAxOS4xLjUKICAgICAgICAgIC0gbGF0ZXN0CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvNWUxMzk5YjY1YTQ4YzgxNTk1YjVlYzU4YjBlM2Y3MDQ0NGMzMDY3Zi8xOS9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogJzE5LjEnCiAgICBtYWpvclZlcnNpb246ICcxOS4xJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE2LTA5LTIyVDEyOjA1OjUzJwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMTktc2xpbQogICAgICAgICAgLSAxOS4xLXNsaW0KICAgICAgICAgIC0gc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzliZTI0OWVmZmU5M2UzYzYxZmEwNzQ5MDc4ZTU1ZWY4ZDA1MGExNmUvMTkvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzE5JwogICAgICAgICAgLSAnMTkuMScKICAgICAgICAgIC0gbGF0ZXN0CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvOWJlMjQ5ZWZmZTkzZTNjNjFmYTA3NDkwNzhlNTVlZjhkMDUwYTE2ZS8xOS9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMTkuMC43CiAgICBtYWpvclZlcnNpb246ICcxOS4wJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE2LTA5LTE1VDE0OjM0OjE1JwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMTktc2xpbQogICAgICAgICAgLSAxOS4wLXNsaW0KICAgICAgICAgIC0gMTkuMC43LXNsaW0KICAgICAgICAgIC0gc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzZkYTdjZWEwNDViMjYwM2E0MmRiNTgwNGNjMTVlNmNmZmJiNjVlMTkvMTkvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzE5JwogICAgICAgICAgLSAnMTkuMCcKICAgICAgICAgIC0gMTkuMC43CiAgICAgICAgICAtIGxhdGVzdAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzZkYTdjZWEwNDViMjYwM2E0MmRiNTgwNGNjMTVlNmNmZmJiNjVlMTkvMTkvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDE5LjAuNQogICAgbWFqb3JWZXJzaW9uOiAnMTkuMCcKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxNi0wOC0yMVQxMToyNzoyMScKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDE5LXNsaW0KICAgICAgICAgIC0gMTkuMC1zbGltCiAgICAgICAgICAtIDE5LjAuNS1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC83ZjVlN2I0NzY4MTM2Y2FhNWYxNWUwYjg0ZDZiNTAzZmE0MzBlZjdiLzE5L3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcxOScKICAgICAgICAgIC0gJzE5LjAnCiAgICAgICAgICAtIDE5LjAuNQogICAgICAgICAgLSBsYXRlc3QKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC83ZjVlN2I0NzY4MTM2Y2FhNWYxNWUwYjg0ZDZiNTAzZmE0MzBlZjdiLzE5L0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAxOS4wLjMKICAgIG1ham9yVmVyc2lvbjogJzE5LjAnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTYtMDgtMTBUMTM6Mzg6NTcnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAxOS1zbGltCiAgICAgICAgICAtIDE5LjAtc2xpbQogICAgICAgICAgLSAxOS4wLjMtc2xpbQogICAgICAgICAgLSBzbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvZDRiMmE3YzJiZWYzODEzNDRjYTI4MTgzZDYyNWUyZGIwNjZiZTIyYi8xOS9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMTknCiAgICAgICAgICAtICcxOS4wJwogICAgICAgICAgLSAxOS4wLjMKICAgICAgICAgIC0gbGF0ZXN0CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvZDRiMmE3YzJiZWYzODEzNDRjYTI4MTgzZDYyNWUyZGIwNjZiZTIyYi8xOS9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMTkuMC4xCiAgICBtYWpvclZlcnNpb246ICcxOS4wJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE2LTA3LTEzVDIyOjM0OjU2JwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMTktc2xpbQogICAgICAgICAgLSAxOS4wLXNsaW0KICAgICAgICAgIC0gMTkuMC4xLXNsaW0KICAgICAgICAgIC0gc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzAxYTRlMDNhNWYxZmQwYWU3Y2Y2ZDM5NmFlNmZlNTY5NTU1NTY0NWQvMTkvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzE5JwogICAgICAgICAgLSAnMTkuMCcKICAgICAgICAgIC0gMTkuMC4xCiAgICAgICAgICAtIGxhdGVzdAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzAxYTRlMDNhNWYxZmQwYWU3Y2Y2ZDM5NmFlNmZlNTY5NTU1NTY0NWQvMTkvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246ICcxOS4wJwogICAgbWFqb3JWZXJzaW9uOiAnMTkuMCcKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxNi0wNi0yMlQxNzoxMzozMScKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDE5LXNsaW0KICAgICAgICAgIC0gMTkuMC1zbGltCiAgICAgICAgICAtIHNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9lYTMyZDVmNmYxNzM1ZjlmNTViZWUwNGIxMTIxNjZkYTk2ZWI5YzczLzE5L3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcxOScKICAgICAgICAgIC0gJzE5LjAnCiAgICAgICAgICAtIGxhdGVzdAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwL2VhMzJkNWY2ZjE3MzVmOWY1NWJlZTA0YjExMjE2NmRhOTZlYjljNzMvMTkvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDE4LjMuNC4xMQogICAgbWFqb3JWZXJzaW9uOiAnMTguMycKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxOC0xMS0yNlQxNTo0ODoyMicKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOnN0cmV0Y2gKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMTgnCiAgICAgICAgICAtICcxOC4zJwogICAgICAgICAgLSAxOC4zLjQKICAgICAgICAgIC0gMTguMy40LjExCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvODgxNWEwYzJjZTUyODJkYmYwODU1M2Y2MDJlNTIxNGU0ZTk2MzFjZS8xOC9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDkgKHN0cmV0Y2gpCiAgICAgICAgcmVsZWFzZTogOS4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpzdHJldGNoCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMTgtc2xpbQogICAgICAgICAgLSAxOC4zLXNsaW0KICAgICAgICAgIC0gMTguMy40LXNsaW0KICAgICAgICAgIC0gMTguMy40LjExLXNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC8xNDVkNGEwMDAyMjA2ZTAwM2NjNzZjODcxOWI2MjY0NTI5MTY1ODg5LzE4L3NsaW0vRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDE4LjMuNC4xMAogICAgbWFqb3JWZXJzaW9uOiAnMTguMycKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxOC0xMC0zMFQwMDo1NTozMCcKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDE4LXNsaW0KICAgICAgICAgIC0gMTguMy1zbGltCiAgICAgICAgICAtIDE4LjMuNC1zbGltCiAgICAgICAgICAtIDE4LjMuNC4xMC1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvNGZlNGNhYThlYmQwMTc0OGI1MGJhYzc0NWY1ZTk2ZDg3MmUxZGI0Yy8xOC9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMTgnCiAgICAgICAgICAtICcxOC4zJwogICAgICAgICAgLSAxOC4zLjQKICAgICAgICAgIC0gMTguMy40LjEwCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvNGZlNGNhYThlYmQwMTc0OGI1MGJhYzc0NWY1ZTk2ZDg3MmUxZGI0Yy8xOC9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMTguMy40LjkKICAgIG1ham9yVmVyc2lvbjogJzE4LjMnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTgtMDUtMDlUMDk6MDk6NDUnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAxOC1zbGltCiAgICAgICAgICAtIDE4LjMtc2xpbQogICAgICAgICAgLSAxOC4zLjQtc2xpbQogICAgICAgICAgLSAxOC4zLjQuOS1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvZjQxOThkNmZjOTU3MTllYmIzYzJjM2NkNjY0MDdjNzhmNGFhM2Y0OS8xOC9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMTgnCiAgICAgICAgICAtICcxOC4zJwogICAgICAgICAgLSAxOC4zLjQKICAgICAgICAgIC0gMTguMy40LjkKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cC9lNWIwMzNlNTRjNjU0Yjc4ZDlkYThlYjMyNTljOWUzZjczODI4NzBmLzE4L0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAxOC4zLjQuOAogICAgbWFqb3JWZXJzaW9uOiAnMTguMycKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxOC0wMy0wNVQyMDowNjoyMicKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDE4LXNsaW0KICAgICAgICAgIC0gMTguMy1zbGltCiAgICAgICAgICAtIDE4LjMuNC1zbGltCiAgICAgICAgICAtIDE4LjMuNC44LXNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC8zNTRmODVkYjA5ZDQwM2UzZDk3MGQwNzMxYjgxMWM3NzQwODZlZjI2LzE4L3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcxOCcKICAgICAgICAgIC0gJzE4LjMnCiAgICAgICAgICAtIDE4LjMuNAogICAgICAgICAgLSAxOC4zLjQuOAogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzM1NGY4NWRiMDlkNDAzZTNkOTcwZDA3MzFiODExYzc3NDA4NmVmMjYvMTgvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDE4LjMuNC43CiAgICBtYWpvclZlcnNpb246ICcxOC4zJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE4LTAyLTE0VDAxOjUyOjExJwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMTgnCiAgICAgICAgICAtICcxOC4zJwogICAgICAgICAgLSAxOC4zLjQKICAgICAgICAgIC0gMTguMy40LjcKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9mNjYwNjM4OWI5OTVkMjRkY2U4OTMzZTRjYTRkNmQ0NmZjZTg2MTJiLzE4L0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMTgtc2xpbQogICAgICAgICAgLSAxOC4zLXNsaW0KICAgICAgICAgIC0gMTguMy40LXNsaW0KICAgICAgICAgIC0gMTguMy40Ljctc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzU3MmRmOTFkOTRkZTg1N2RlNjYxZGYzMGYzMzUwOGU0NzJjMzAwYTkvMTgvc2xpbS9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMTguMy40LjYKICAgIG1ham9yVmVyc2lvbjogJzE4LjMnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTctMTEtMTZUMTM6MjU6NTEnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAxOC1zbGltCiAgICAgICAgICAtIDE4LjMtc2xpbQogICAgICAgICAgLSAxOC4zLjQtc2xpbQogICAgICAgICAgLSAxOC4zLjQuNi1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvZWRmMzg5NTJjYzM2MWZmNDA5ZjAxMTdlYTkxNTgxMTgwYTgwYTIyMS8xOC9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMTgnCiAgICAgICAgICAtICcxOC4zJwogICAgICAgICAgLSAxOC4zLjQKICAgICAgICAgIC0gMTguMy40LjYKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9lZGYzODk1MmNjMzYxZmY0MDlmMDExN2VhOTE1ODExODBhODBhMjIxLzE4L0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAxOC4zLjQuNQogICAgbWFqb3JWZXJzaW9uOiAnMTguMycKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxNy0wOS0wNlQxNDozNDo1NycKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDE4LXNsaW0KICAgICAgICAgIC0gMTguMy1zbGltCiAgICAgICAgICAtIDE4LjMuNC1zbGltCiAgICAgICAgICAtIDE4LjMuNC41LXNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9lN2QxNDVjOTE1NDU4ZTViYmI4NTdhNTdjOWFhZDcxMjVmOTVhODUzLzE4L3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcxOCcKICAgICAgICAgIC0gJzE4LjMnCiAgICAgICAgICAtIDE4LjMuNAogICAgICAgICAgLSAxOC4zLjQuNQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwL2U3ZDE0NWM5MTU0NThlNWJiYjg1N2E1N2M5YWFkNzEyNWY5NWE4NTMvMTgvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDE4LjMuNC40CiAgICBtYWpvclZlcnNpb246ICcxOC4zJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE2LTA4LTIxVDExOjI3OjIxJwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMTgtc2xpbQogICAgICAgICAgLSAxOC4zLXNsaW0KICAgICAgICAgIC0gMTguMy40LXNsaW0KICAgICAgICAgIC0gMTguMy40LjQtc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzdmNWU3YjQ3NjgxMzZjYWE1ZjE1ZTBiODRkNmI1MDNmYTQzMGVmN2IvMTgvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzE4JwogICAgICAgICAgLSAnMTguMycKICAgICAgICAgIC0gMTguMy40CiAgICAgICAgICAtIDE4LjMuNC40CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvN2Y1ZTdiNDc2ODEzNmNhYTVmMTVlMGI4NGQ2YjUwM2ZhNDMwZWY3Yi8xOC9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMTguMy40LjMKICAgIG1ham9yVmVyc2lvbjogJzE4LjMnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTYtMDgtMTBUMTM6Mzg6NTcnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAxOC1zbGltCiAgICAgICAgICAtIDE4LjMtc2xpbQogICAgICAgICAgLSAxOC4zLjQtc2xpbQogICAgICAgICAgLSAxOC4zLjQuMy1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvZDRiMmE3YzJiZWYzODEzNDRjYTI4MTgzZDYyNWUyZGIwNjZiZTIyYi8xOC9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMTgnCiAgICAgICAgICAtICcxOC4zJwogICAgICAgICAgLSAxOC4zLjQKICAgICAgICAgIC0gMTguMy40LjMKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9kNGIyYTdjMmJlZjM4MTM0NGNhMjgxODNkNjI1ZTJkYjA2NmJlMjJiLzE4L0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAxOC4zLjQuMQogICAgbWFqb3JWZXJzaW9uOiAnMTguMycKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxNi0wNy0xM1QyMjozNDo1NicKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDE4LXNsaW0KICAgICAgICAgIC0gMTguMy1zbGltCiAgICAgICAgICAtIDE4LjMuNC1zbGltCiAgICAgICAgICAtIDE4LjMuNC4xLXNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC8wMWE0ZTAzYTVmMWZkMGFlN2NmNmQzOTZhZTZmZTU2OTU1NTU2NDVkLzE4L3NsaW0vRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcxOCcKICAgICAgICAgIC0gJzE4LjMnCiAgICAgICAgICAtIDE4LjMuNAogICAgICAgICAgLSAxOC4zLjQuMQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzAxYTRlMDNhNWYxZmQwYWU3Y2Y2ZDM5NmFlNmZlNTY5NTU1NTY0NWQvMTgvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDE4LjMuNAogICAgbWFqb3JWZXJzaW9uOiAnMTguMycKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxNi0wNi0yMlQxNzoxMzozMScKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDE4LXNsaW0KICAgICAgICAgIC0gMTguMy1zbGltCiAgICAgICAgICAtIDE4LjMuNC1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvYWVhZTdlYTk1ZDhmNDJjYjNjODEwZmI5NjI3MjAyMzVlMzA0Y2I2MC8xOC9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMTgnCiAgICAgICAgICAtICcxOC4zJwogICAgICAgICAgLSAxOC4zLjQKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9hZWFlN2VhOTVkOGY0MmNiM2M4MTBmYjk2MjcyMDIzNWUzMDRjYjYwLzE4L0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAxOC4zLjMKICAgIG1ham9yVmVyc2lvbjogJzE4LjMnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTYtMDQtMjdUMDQ6NDU6MDgnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDE4LjMuMwogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzJkYWVhYjllZjIwNDA5NTE2OWIzY2M5NmRlZjMxY2UwOGE1ZjczNTgvMTgvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDE4LjMuMgogICAgbWFqb3JWZXJzaW9uOiAnMTguMycKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxNi0wNC0yN1QwNDo0NTowOCcKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMTguMy4yCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvYTlmNTEyMWYzNGRlYjMwY2M2MWUyMWYwMzcwYWE4ZjE2NzIzYWExNC8xOC9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogJzE4LjMnCiAgICBtYWpvclZlcnNpb246ICcxOC4zJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE2LTA0LTI3VDA0OjQ1OjA4JwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMTguMy1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvYTlmNTEyMWYzNGRlYjMwY2M2MWUyMWYwMzcwYWE4ZjE2NzIzYWExNC8xOC9zbGltL0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMTguMycKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9hOWY1MTIxZjM0ZGViMzBjYzYxZTIxZjAzNzBhYThmMTY3MjNhYTE0LzE4L0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAxOC4yLjMKICAgIG1ham9yVmVyc2lvbjogJzE4LjInCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTYtMDItMDNUMTE6MTM6MTInCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDE4LjIuMwogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzdiNDUwY2Q3ZjQzMjAzZDM0YzEwYWUwZDM1ZTlmOGVhNjcyNTc0MTUvMTgvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDE4LjIuMgogICAgbWFqb3JWZXJzaW9uOiAnMTguMicKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxNi0wMS0yN1QxOTozNjoyOScKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMTguMi4yCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvYTQ0YjUwNmQ2MGY0MTdjMTEzNTI1Nzc4OTI0NGY5YzNmNzk0MTExOC8xOC9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMTguMi4xCiAgICBtYWpvclZlcnNpb246ICcxOC4yJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE1LTEyLTI4VDE4OjE1OjA3JwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAxOC4yLjEKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC80Y2NhZWIxYjcwOWMyMjdiZWEwYTcxMmMyNWY5NzQzNTAyNDJkNmQ2LzE4L0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAnMTguMicKICAgIG1ham9yVmVyc2lvbjogJzE4LjInCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTYtMDEtMjdUMTk6MzY6MjknCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcxOC4yJwogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwL2E0NGI1MDZkNjBmNDE3YzExMzUyNTc3ODkyNDRmOWMzZjc5NDExMTgvMTgvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAxOC4yLXNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC83YjQ1MGNkN2Y0MzIwM2QzNGMxMGFlMGQzNWU5ZjhlYTY3MjU3NDE1LzE4L3NsaW0vRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDE4LjEuNAogICAgbWFqb3JWZXJzaW9uOiAnMTguMScKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxNS0xMS0yMVQwMDozOToxNCcKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMTguMS40CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvMjBlNDE0NjQwNzVkYzBmYzc2NzA5YmU3NzcwMTUzMGVkZGI2ZmUzMy8xOC9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMTguMS4zCiAgICBtYWpvclZlcnNpb246ICcxOC4xJwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE1LTA5LTExVDAwOjAwOjAwJwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAxOC4xLjMKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC83MGZkMWUzMjc0NWNiYzY4ZTg5NGQzNDBiMTA1ZjMwYjM4Nzk2NmM4LzE4L0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAnMTguMScKICAgIG1ham9yVmVyc2lvbjogJzE4LjEnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTUtMDktMTFUMDA6MDA6MDAnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtICcxOC4xJwogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzcwZmQxZTMyNzQ1Y2JjNjhlODk0ZDM0MGIxMDVmMzBiMzg3OTY2YzgvMTgvRG9ja2VyZmlsZQoKICAtIHZlcnNpb246ICcxOCcKICAgIG1ham9yVmVyc2lvbjogJzE4JwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE2LTAxLTI3VDE5OjM2OjI5JwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMTgnCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvYTQ0YjUwNmQ2MGY0MTdjMTEzNTI1Nzc4OTI0NGY5YzNmNzk0MTExOC8xOC9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDIKICAgICAgICBpbWFnZTogZGViaWFuOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDE4LXNsaW0KICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC9hOWY1MTIxZjM0ZGViMzBjYzYxZTIxZjAzNzBhYThmMTY3MjNhYTE0LzE4L3NsaW0vRG9ja2VyZmlsZQoKICAtIHZlcnNpb246IDE3LjUuNi45CiAgICBtYWpvclZlcnNpb246ICcxNy41JwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE4LTA1LTA5VDA5OjA5OjQ1JwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMTctc2xpbQogICAgICAgICAgLSAxNy41LXNsaW0KICAgICAgICAgIC0gMTcuNS42LXNsaW0KICAgICAgICAgIC0gMTcuNS42Ljktc2xpbQogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXJsYW5nL2RvY2tlci1lcmxhbmctb3RwL2E3NTczOGYzNDRhZjFmMTc3ZjgyOGNiYWE2ZThhNDRkMTU3NDlkNWEvMTcvc2xpbS9Eb2NrZXJmaWxlCiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzE3JwogICAgICAgICAgLSAnMTcuNScKICAgICAgICAgIC0gMTcuNS42CiAgICAgICAgICAtIDE3LjUuNi45CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2VybGFuZy9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcmxhbmcvZG9ja2VyLWVybGFuZy1vdHAvYTc1NzM4ZjM0NGFmMWYxNzdmODI4Y2JhYTZlOGE0NGQxNTc0OWQ1YS8xNy9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMTcuNS42LjgKICAgIG1ham9yVmVyc2lvbjogJzE3LjUnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTYtMDItMDNUMTE6MTM6MTInCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDE3LjUuNi44CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvN2I0NTBjZDdmNDMyMDNkMzRjMTBhZTBkMzVlOWY4ZWE2NzI1NzQxNS8xNy9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMTcuNS42LjcKICAgIG1ham9yVmVyc2lvbjogJzE3LjUnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTUtMTItMjhUMTg6MTU6MDcnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDE3LjUuNi43CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvNGNjYWViMWI3MDljMjI3YmVhMGE3MTJjMjVmOTc0MzUwMjQyZDZkNi8xNy9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogMTcuNS42LjQKICAgIG1ham9yVmVyc2lvbjogJzE3LjUnCiAgICBwcmVyZWxlYXNlOiBmYWxzZQogICAgZGF0ZTogJzIwMTUtMDktMTFUMDA6MDA6MDAnCiAgICBkaXN0cmlidXRpb25SZWxlYXNlczogRGViaWFuCiAgICBkaXN0cmlidXRpb25zOgogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiA1CiAgICAgICAgaW1hZ2U6IGJ1aWxkcGFjay1kZXBzOmplc3NpZQogICAgICAgIHRhZ3M6CiAgICAgICAgICAtIDE3LjUuNi40CiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvNzBmZDFlMzI3NDVjYmM2OGU4OTRkMzQwYjEwNWYzMGIzODc5NjZjOC8xNy9Eb2NrZXJmaWxlCgogIC0gdmVyc2lvbjogJzE3LjUnCiAgICBtYWpvclZlcnNpb246ICcxNy41JwogICAgcHJlcmVsZWFzZTogZmFsc2UKICAgIGRhdGU6ICcyMDE1LTA5LTExVDAwOjAwOjAwJwogICAgZGlzdHJpYnV0aW9uUmVsZWFzZXM6IERlYmlhbgogICAgZGlzdHJpYnV0aW9uczoKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogNQogICAgICAgIGltYWdlOiBidWlsZHBhY2stZGVwczpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAnMTcuNScKICAgICAgICB1cmxSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwCiAgICAgICAgdXJsRG9ja2VyZmlsZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cC83MGZkMWUzMjc0NWNiYzY4ZTg5NGQzNDBiMTA1ZjMwYjM4Nzk2NmM4LzE3L0RvY2tlcmZpbGUKICAgICAgLSBuYW1lOiBEZWJpYW4KICAgICAgICByZWxlYXNlTmFtZTogOCAoamVzc2llKQogICAgICAgIHJlbGVhc2U6IDguMAogICAgICAgIHdlaWdodDogMgogICAgICAgIGltYWdlOiBkZWJpYW46amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gMTcuNS1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvN2I0NTBjZDdmNDMyMDNkMzRjMTBhZTBkMzVlOWY4ZWE2NzI1NzQxNS8xNy9zbGltL0RvY2tlcmZpbGUKCiAgLSB2ZXJzaW9uOiAnMTcnCiAgICBtYWpvclZlcnNpb246ICcxNycKICAgIHByZXJlbGVhc2U6IGZhbHNlCiAgICBkYXRlOiAnMjAxNS0wOS0xMVQwMDowMDowMCcKICAgIGRpc3RyaWJ1dGlvblJlbGVhc2VzOiBEZWJpYW4KICAgIGRpc3RyaWJ1dGlvbnM6CiAgICAgIC0gbmFtZTogRGViaWFuCiAgICAgICAgcmVsZWFzZU5hbWU6IDggKGplc3NpZSkKICAgICAgICByZWxlYXNlOiA4LjAKICAgICAgICB3ZWlnaHQ6IDUKICAgICAgICBpbWFnZTogYnVpbGRwYWNrLWRlcHM6amVzc2llCiAgICAgICAgdGFnczoKICAgICAgICAgIC0gJzE3JwogICAgICAgIHVybFJlcG9zaXRvcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAKICAgICAgICB1cmxEb2NrZXJmaWxlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYzBiL2RvY2tlci1lcmxhbmctb3RwLzcwZmQxZTMyNzQ1Y2JjNjhlODk0ZDM0MGIxMDVmMzBiMzg3OTY2YzgvMTcvRG9ja2VyZmlsZQogICAgICAtIG5hbWU6IERlYmlhbgogICAgICAgIHJlbGVhc2VOYW1lOiA4IChqZXNzaWUpCiAgICAgICAgcmVsZWFzZTogOC4wCiAgICAgICAgd2VpZ2h0OiAyCiAgICAgICAgaW1hZ2U6IGRlYmlhbjpqZXNzaWUKICAgICAgICB0YWdzOgogICAgICAgICAgLSAxNy1zbGltCiAgICAgICAgdXJsUmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2MwYi9kb2NrZXItZXJsYW5nLW90cAogICAgICAgIHVybERvY2tlcmZpbGU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jMGIvZG9ja2VyLWVybGFuZy1vdHAvN2I0NTBjZDdmNDMyMDNkMzRjMTBhZTBkMzVlOWY4ZWE2NzI1NzQxNS8xNy9zbGltL0RvY2tlcmZpbGUK\"")
	packr.PackJSONBytes("../config", "golang-versions.yml", "\"\"")
	packr.PackJSONBytes("../config", "haskell-versions.yml", "\"\"")
	packr.PackJSONBytes("../config", "languages.yml", "\"LSBsYW5ndWFnZTogZXJsYW5nCiAgdXJsOiBodHRwczovL2dpdGh1Yi5jb20vZXJsYW5nL290cC9yZWxlYXNlcwoKLSBsYW5ndWFnZTogZ29sYW5nCiAgdXJsOiBodHRwczovL2dvbGFuZy5vcmcvZG9jL2RldmVsL3JlbGVhc2UuaHRtbAoKLSBsYW5ndWFnZTogaGFza2VsbAogIHVybDogaHR0cHM6Ly93d3cuaGFza2VsbC5vcmcvZ2hjLwoKLSBsYW5ndWFnZTogbm9kZQogIHVybDogaHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkL3JlbGVhc2VzLwoKIy1sYW5ndWFnZTogcGhwCiN1cmw6IGh0dHBzOi8vd3d3LnBocC5uZXQvcmVsZWFzZXMvaW5kZXgucGhwCgotIGxhbmd1YWdlOiBweXRob24KICB1cmw6IGh0dHBzOi8vd3d3LnB5dGhvbi5vcmcvZG93bmxvYWRzLwoKLSBsYW5ndWFnZTogcnVieQogIHVybDogaHR0cHM6Ly93d3cucnVieS1sYW5nLm9yZy9lbi9kb3dubG9hZHMvcmVsZWFzZXMvCgotIGxhbmd1YWdlOiBydXN0CiAgdXJsOiBodHRwczovL2dpdGh1Yi5jb20vcnVzdC1sYW5nL3J1c3QvcmVsZWFzZXMKCi0gbGFuZ3VhZ2U6IHN3aWZ0CiAgdXJsOiBodHRwczovL3d3dy5waHAubmV0L3JlbGVhc2VzL2luZGV4LnBocAo=\"")
	packr.PackJSONBytes("../config", "node-versions.yml", "\"\"")
	packr.PackJSONBytes("../config", "python-versions.yml", "\"\"")
	packr.PackJSONBytes("../config", "ruby-versions.yml", "\"\"")
	packr.PackJSONBytes("../config", "rust-versions.yml", "\"\"")
	packr.PackJSONBytes("../config", "swift-versions.yml", "\"\"")
}
